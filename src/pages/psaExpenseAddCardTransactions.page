<apex:page standardstylesheets="true"
           showheader="true"
           cache="false"
           sidebar="false"
           standardController="pse__Expense_Report__c"
           extensions="psaExpenseAddCardTransactionsController">

  <!-- remote objects -->
  <apex:remoteObjects >
      <!-- AttachmentGateway -->
      <apex:remoteObjectModel name="Attachment"
                              jsShorthand="AttachmentGateway"
                              fields="Id, Name, BodyLength, ParentId"/>

  </apex:remoteObjects>

<html xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
  <head>
    <!--
        Include lightning design, fa icons...
    -->
    <link rel="stylesheet" href="{!URLFOR($Resource.SLDS092,'assets/styles/salesforce-lightning-design-system-vf.min.css')}" />

<link rel="stylesheet" href="//code.jquery.com/ui/1.11.4/themes/smoothness/jquery-ui.css"/>

    <link rel="stylesheet" href="{!URLFOR($Resource.PSAjsComponents,'vendor/css/font-awesome.min.css')}" />
    <link rel="stylesheet" href="{!URLFOR($Resource.PSAjsComponents,'vendor/components/dropzone/dropzone.css')}" />


    <!--
        Include javascript libs
    -->
    <script src="{!URLFOR($Resource.PSAjsComponents, 'vendor/components/jquery/jquery.min.js')}"></script>
    <script src="{!URLFOR($Resource.PSAjsComponents, 'vendor/components/jquery.ui/jquery.ui.min.js')}"></script>

    <script src="{!URLFOR($Resource.PSAjsComponents, 'vendor/components/jquery.tablesorter/jquery.tablesorter.js')}"></script>

    <script src="{!URLFOR($Resource.PSAjsComponents, 'vendor/components/moment/moment.js')}"></script>
    <script src="{!URLFOR($Resource.PSAjsComponents, 'vendor/components/dropzone/dropzone.js')}"></script>

    <!-- disable sfdc auto-focus on page load-->
    <script>function setFocusOnLoad() {setTimeout(function(){$("select:first").click().focus().blur();},1); return;}</script>

    <style>
        .dateFormat { display:none;}

        /* grey page out ... */
        .overlay {
            position: fixed;
            top: 0;
            left: 0;
            height: 100%;
            width: 100%;
            background-color: rgba(0,0,0,0.5);
            z-index: 9999;
        }


        /* big spinner box*/
        .overlay-spinner-box {
            font-size: 10.2em;
            position: fixed;
            top: 50%;
            left: 50%;
            margin-top: -50px;
        }


        .cursor-pointer { cursor:pointer }


        /* container for card transactions */
        .wrappercardbody-container{
           overflow:auto;
           min-height: 400px;
        }

/* exmpale: apex:inputField value="{ userExpenseReport.pse__Project__c }" styleClass="slds-input" */
        /* lookup field override styling */
        .slds .lookupInput a {
          display:block;
          position: absolute;
          top:0px;
          padding: 6px 12px;
        }
        .slds  .lookupInput img {
          float:right;
        }
        .slds span.lookupInput {
          position: relative;
          display: block;
        }
        .slds .lookupInput a, .lookupInput a {
          border:none !important;
          background: none !important;
        }
        /* end lookup field override */


        .slds-input .input-error {
          border:2px solid #c23934;
        }

        .slds-input.rptlookup-error {
          border:2px solid #c23934;
        }

        #card-transaction-table .slds-text-heading--label {
            /*white-space: initial;*/
        }

        #card-transaction-table {
          min-width:1480px;
        }

        span.rptlookup-error {
          font-weight: bold;
          color:#c23934;
        }

        /* decrease table row padding*/
        .slds .slds-table td {
          padding:6px;
        }

        .slds .slds-table td.tfoot-totals-label-td {
            text-align: right;
        }

      #card-transaction-table .card-trans-psa-expense-report {
        white-space: nowrap;
        padding-right: 10px;
        min-width:215px;
      }


        .slds .expense-report-dialog-label  {
          font-weight: 700;
          font-size: 14px;
        }

        .exp_report_modal_resource_name {
            width:100%;
            border-top: 2px solid #d8dde6;
            border-bottom-right-radius: 4px;
            border-bottom-left-radius: 4px;
            padding: 12px 16px;
            background-color: #f4f6f9;
        }

        .exp_report_modal_resource_control {
          width:35%;
          text-align: right;
        }


      /* jquery tablesorter for MAIN card transaction table
        -- inject font-awesome arrow icons for indicating the column sorting
      */
      table#card-transaction-table thead tr th.headerSortUp:after,
      table#card-transaction-table thead tr th.headerSortDown:after,
      table#card-transaction-table thead tr th.header:after {
        font-family: FontAwesome;
      }
      table#card-transaction-table thead tr th.header:after {
        content: "\f0dc";
      }
      table#card-transaction-table thead tr th.headerSortUp:after {
        content: "\f0de";
      }
      table#card-transaction-table thead tr th.headerSortDown:after {
        content: "\f0dd";
      }
      /* end jquery tablesorter- font awesome icon setting*/


      /* jquery tablesorter for EXPENSE MATCHING table
        -- inject font-awesome arrow icons for indicating the column sorting
      */
      table#expense-list-table thead tr th.headerSortUp:after,
      table#expense-list-table thead tr th.headerSortDown:after,
      table#expense-list-table thead tr th.header:after {
        font-family: FontAwesome;
      }
      table#expense-list-table thead tr th.header:after {
        content: "\f0dc";
      }
      table#expense-list-table thead tr th.headerSortUp:after {
        content: "\f0de";
      }
      table#expense-list-table thead tr th.headerSortDown:after {
        content: "\f0dd";
      }
      /* end jquery tablesorter- font awesome icon setting*/







      /* center the billable/personal/previously entered checkboxes */
      .slds .slds-table th.charge-type-cbox,
      .slds .slds-table td.charge-type-cbox {
        text-align: center
      }

      /* assist with positioning our help items */
      .slds .my-help-theme-more-to-left {
        left:-150px;
      }

      .slds .my-help-theme-even-more-to-left {
        left:-250px;
      }

        .slds .hidden-class {
            display : none !important;
            background-color: inherit;
        }

      .main-hidden-class {
            display : none !important;
            background-color: inherit;
        }


        /* when added to the body */
        .maximized-app-position {
            position: fixed;
            top: 0px;
            left: 0px;
            z-index: 100;

            height: 100%;
            width: 100%;
            overflow: auto;

            background-color: #fff;
            border:3px solid;
        }

        /* MIN MAX ICON STUFF !!! */

        .maximized-app-position .slds-card {
          margin:6px;
        }

        /*
          fa-rotate-45
        */
        .slds .fa.fa-rotate-45 {
            filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=1);
            -webkit-transform: rotate(45deg);
            -ms-transform: rotate(45deg);
            transform: rotate(45deg);
        }

        /*
          fa-rotate-230
        */
        .slds .fa.fa-rotate-230 {
            filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=1);
            -webkit-transform: rotate(230deg);
            -ms-transform: rotate(230deg);
            transform: rotate(230deg);
        }


        .slds .min-max-icon {
          font-size:24px;
          color:#54698d
        }

        .slds .table-header-row {
          background-color: #f4f6f9;
        }

        .slds .tr-color-odd {
          /*background-color: #fff;*/
        }

        .slds .tr-color-even {
          /*background-color: #f4f6f9;*/
        }

        .slds .select-size-wrapper .slds-select[size],
        .slds .card-trans-psa-expense-report .slds-select[size] {
            height:34px !important;
        }

        .slds .select-size-wrapper .slds-select[size] {
          max-width:200px !important;
        }

        /* table classes for wrapping text*/
/*        .slds .slds-table th.white-space-normal,
        .slds .slds-table td.white-space-normal {
          white-space:normal
        }

        .slds .slds-table th.white-space-nowrap
        .slds .slds-table td.white-space-nowrap {
          white-space:nowrap
        }*/

        .flash-input-bg {
          border:1px solid green !important;
        }


        .slds .input-error-bg {
          border:1px solid red !important;
        }

        .slds .coach__item,
        .slds .coach__value {
        border-top: #d8dde6 1px solid;
            padding: 1rem 0;
            color: #54698d;
        }

        .slds .expanded-transaction-padding {
          padding:12px;
        }

        .slds ul li, ol li {
          margin-left: 1.5em;
          margin-right: 1.5em;
          padding-left: 0;
          padding-right: 0;
        }

        .slds .inlinehelp-class {
          white-space: normal;
        }

        /** style up our dropzone **/
        .dropzone {
            border: 2px dashed rgba(0, 0, 0, 0.3);
            text-align:initial;
            min-height: 150px;
            padding: 1px 1px;
            padding:10px;
            background-color: #fff;
            margin:8px;
            white-space: normal;

        }

        /* shrink the dropzone preview image */
        .dropzone .dz-preview .dz-image {
            width: 110px;
            height: 110px;
        }


/*    .slds .faux-button-brand {
        background-color: #0070d2;
        border: 1px solid #0070d2;
        color: white;
    }
*/
    .slds .expand-collapse-button {
      border-radius: 15px;
      padding-left: 9px;
      width: 32px;
      height: 32px;
    }



    .slds .th-receiptType,
    .slds .td-receiptType {
      border-right:1px solid #eee;
    }

    .slds .th-previouslyEntered {
      max-width:115px;
      white-space: initial !important;
    }

    .slds .th-invalidTransaction {
      max-width:115px;
      white-space: initial !important;
    }


      .slds .th-psaExpenseType,
      .slds .td-psaExpenseType {
        white-space: nowrap;
        padding-right: 10px;
        min-width:215px;
      }



/*    .slds .th-previouslyEntered {
      display:none;
    }

    .slds .td-previouslyEntered {
      display:none;
    }*/


    .slds .th-billable,
    .slds .th-personal {
      max-width:90px;
      white-space: initial !important;
    }

    .slds .th-checkExpand {
      max-width:100px;
      width:100px;
    }

    .slds .th-psaExpenseType {
      width:200px;
    }
/*
    .slds .with-help {
      white-space: normal;
    }
*/

    .slds .exp-description {
      max-width:200px;
      overflow: hidden;
      text-overflow: ellipsis;
    }

    .slds .exp-notes {
      max-width:200px;
      overflow: hidden;
      text-overflow: ellipsis;
    }

    .slds .required-red {
      color:#c23934;
    }

    .slds .hasAttachmentYes {
      color:green;
    }

    .slds .hasAttachmentNo {
      color:#c23934;
    }


.slds .expense-report-list {
  display: inline-block;
  text-align:left;
  list-style: none
}


.slds .expense-report-list a:hover,
.slds .expense-report-list a:focus:hover {
   color: #0070d2 !important;
}



.slds .er-white-space-normal {
  white-space: normal;
}


.datePicker {
  z-index: 9005;
}

/*.slds .expense-report-list a:visited {
   color: #0070d2 !important;
}
*/


    </style>

    <!-- initialize the AJAX toolkit for attachment upload ?? -->
    <script type="text/javascript"> var __sfdcSessionId = '{!GETSESSIONID()}'; var curPseResource;</script>
    <script src="/soap/ajax/32.0/connection.js" type="text/javascript"></script>

  </head>

  <apex:form id="frm">
      <!--
          Loads the user card transactions, based on the optional specified date ranges
      -->
      <apex:actionFunction name="loadUserCardTransactions"
                           action="{!loadUserCardTransactions}"

                           rerender="card-transaction-wrapper-body,
                                     card-transaction-wrapper-footer,
                                     page-alert-panel">

                          <apex:param name="filterStartDate" assignTo="{!filterStartDate}" value=""/>
                          <apex:param name="filterEndDate" assignTo="{!filterEndDate}" value=""/>
        </apex:actionFunction>


      <!--
          Logic for rendering itemized transaction
      -->
      <apex:actionFunction name="itemizeUserCardTransaction"
                           action="{!itemizeUserCardTransaction}"
                           rerender="itemized-card-transaction-wrapper,
                                     advanced-filter-panel,
                                     page-alert-panel">
                          <apex:param name="transactionIdToItemize" assignTo="{!transactionIdToItemize}" value=""/>
        </apex:actionFunction>

      <!--
          Logic for canceling itemized transaction
      -->
      <apex:actionFunction name="cancelItemizeUserCardTransaction"
                           action="{!cancelItemizeUserCardTransaction}"
                           rerender="itemized-card-transaction-wrapper,
                                     advanced-filter-panel,
                                     page-alert-panel"
                           immediate="true">
        </apex:actionFunction>

      <!--
          Action function for adding an itemized line
      -->
      <apex:actionFunction name="addItemizedLine"
                           action="{!addItemizedLine}"
                           rerender="itemized-card-transaction-wrapper,
                                     advanced-filter-panel,
                                     page-alert-panel" />

      <!--
          Action function for deleting an itemized line
      -->
      <apex:actionFunction name="deleteSelectedItemizedLines"
                           action="{!deleteSelectedItemizedLines}"
                           rerender="itemized-card-transaction-wrapper,
                                     advanced-filter-panel,
                                     page-alert-panel" />


      <!--
          Action function for adding a transaction to the expense report
      -->
      <apex:actionFunction name="addToExpenseReport"
                           action="{!addToExpenseReport}"
                           rerender="render-after-add-to-expense-report,
                                     itemized-card-transaction-wrapper,
                                     page-alert-panel"/>

      <!--
          Action function for adding itemized transaction to the expense report
      -->
      <apex:actionFunction name="addItemizedToExpenseReport"
                           action="{!addItemizedToExpenseReport}"
                           rerender="itemized-card-transaction-wrapper,
                                     advanced-filter-panel,
                                     page-alert-panel" />

      <!--
          Action function for adding a single item / card transaction to the expense report
      -->
      <apex:actionFunction name="addSingleItemToExpenseReport"
                           action="{!addSingleItemToExpenseReport}"
                           rerender="render-after-add-to-expense-report,
                                     itemized-card-transaction-wrapper,
                                     page-alert-panel">
                          <apex:param name="cardTansIdToAdd" assignTo="{!cardTansIdToAdd}" value=""/>
        </apex:actionFunction>

      <!--
          Action function for matching card transaction with expense
      -->
      <apex:actionFunction name="mapTransactionToExpense"
                           action="{!mapTransactionToExpense}"
                           rerender="map-trans-to-expense-callback-panel">
                          <apex:param name="cardTransIdToMap" assignTo="{!cardTransIdToMap}" value=""/>
                          <apex:param name="expenseIdToMap" assignTo="{!expenseIdToMap}" value=""/>
                          <apex:param name="prevCardTransMap" assignTo="{!prevCardTransMap}" value=""/>
        </apex:actionFunction>



      <!--
        Action function for rendering the create expense report modal/dialog window
      -->
      <apex:actionFunction name="createAndShowNewExpenseReport"
                           action="{!createAndShowNewExpenseReport}"
                           rerender="expenseReportModalPanel,
                                     expRptModalUsrAssigSelectOptions,
                                     expRptModalExpRptName,
                                     expRptModalExpRptDesc,
                                     expRptModalExpRptResource"
                            />

      <!--
        Action function for saving a new expense report from the expense-report modal/dialog window
      -->
      <apex:actionFunction name="saveNewExpenseReport"
                           action="{!saveNewExpenseReport}"
                           rerender="advanced-filter-panel,
                                     expenseReportModalPanel,
                                     expRptModalUsrAssigSelectOptions,
                                     expRptModalExpRptName,
                                     expRptModalExpRptDesc,
                                     expRptModalExpRptResource,
                                     page-alert-panel" />

      <!--
        Action function for adding the selected expense report to the checked card transactions
      -->
      <apex:actionFunction name="applySelectedToExpenseReport"
                           action="{!applySelectedToExpenseReport}"
                           rerender="card-transaction-wrapper-body,
                                     advanced-filter-panel,
                                     page-alert-panel"
                            />




<!--
    The ng-app directive defines our angular app
-->
<div class="app-root">

    <!--
        Lightning design system is realized under our slds class
    -->
    <div class="slds">

      <!-- container for our refresh spinner -->
      <div id="overlay-spinner" class="overlay" style="display:none">
          <div class="overlay-spinner-box slds-spinner--large">
            <img src="{!URLFOR($Resource.SLDS092,'/assets/images/spinners/slds_spinner_brand.gif')}"
                 alt="Loading..."
                 style="max-width: inherit;"/>
          </div>
      </div>

      <!--
          Page Header
      -->
      <div class="slds-page-header" role="banner">
        <!--
          Rendered when page is loaded from an expense report
        -->
        <apex:outputPanel rendered="{! isAddFromExpenseReport }">
          <nav class="slds-m-bottom--xx-small" role="navigation">
            <p id="bread-crumb-label" class="slds-assistive-text">You are here:</p>
            <ol class="slds-breadcrumb slds-list--horizontal" aria-labelledby="bread-crumb-label">
              <li class="slds-list__item slds-text-heading--label">
                  <a href="/{!userExpenseReport.Id}">
                    Expense Report : {!userExpenseReport.Name} - {!userExpenseReport.pse__Resource__r.Name}
                  </a>
              </li>
            </ol>
          </nav>
        </apex:outputPanel>

        <!--
          Page header title
        -->
          <div class="slds-media">
                    <div class="slds-media__figure">

                      <svg aria-hidden="true" class="slds-icon slds-icon--large"
                            style="background: #54698d;">
                        <use xmlns:xlink="http://www.w3.org/1999/xlink"
                             xlink:href="{!URLFOR($Resource.SLDS092,'/assets/icons/custom-sprite/svg/symbols.svg#custom17')}"
                             >
                        </use>

                      </svg>

<!-- <svg aria-hidden="true" class="slds-icon slds-icon-text-default">
<use xmlns:xlink="http://www.w3.org/1999/xlink"
  xlink:href="{!URLFOR($Resource.SLDS092,'/assets/icons/standard-sprite/svg/symbols.svg#calibration')}"

  xlink:href="{!URLFOR($Resource.SLDS092,'/assets/icons/standard-sprite/svg/symbols.svg#report')}"
  xlink:href="{!URLFOR($Resource.SLDS092,'/assets/icons/standard-sprite/svg/symbols.svg#endorsement')}"

  xlink:href="{!URLFOR($Resource.SLDS092,'/assets/icons/custom-sprite/svg/symbols.svg#custom17')}"


      ></use>

</svg> -->


                    </div>
        <div class="slds-media__body">
            <div class="slds-grid">
              <div class="slds-col slds-size-1-of-4 xslds-has-flexi-truncate">
                  <h1 class="slds-text-heading--medium slds-truncate">
                        <apex:outputText value="{!pageHeaderTitle}"  />
                  </h1>
                  <!--
                    message updated based on number of transactions displayed
                   -->
                  <p class="slds-text-body--small slds-m-top--x-small">
                    <span id="heading-message">

                    </span>
                  </p>
              </div>

              <!--
                  Advanced filter; only rendered when not adding from expense report
              -->
              <apex:outputPanel id="advanced-filter-panel" rendered="{! notIsAddFromExpenseReport }">
                  <div class="slds-col slds-align-top slds-size--4-of-4 " style="white-space:nowrap;">

                      <div class="slds-form--inline">
                        <!-- resource lookup -->
                        <div class="slds-form-element">
                            <label class="slds-form-element__label">Resource</label>
                            <div class="slds-form-element__control">

                              <!-- only allow operations to lookup by resource! -->
                              <apex:outputPanel rendered="{! isOperationalUser }">
                                    <apex:inputField value="{!userExpenseReport.pse__Resource__c}"
                                                     styleClass="slds-input resourceInput" />
                              </apex:outputPanel>

                              <apex:outputPanel rendered="{! ! isOperationalUser }">
                                    <apex:outputField value="{!userExpenseReport.pse__Resource__c}" />
                              </apex:outputPanel>

                          </div>
                        </div>

                        <!-- expense report lookup -->
                        <div class="slds-form-element" style="text-align:right">
                            <label class="slds-form-element__label" for="date">
                                Expense Report
                              <br/>
                              <a href="#" class=""
                                 onclick="showExpenseReportModal();return false;">Create New Expense Report
                              </a>
                            </label>
                            <div class="slds-form-element__control select-size-wrapper"   style="vertical-align: top;">

                         <!--   <apex:inputField value="{!userExpenseReportSelector.pse__Expense_Report__c}" styleClass="slds-input {!rptLookupErrorClass}" />  -->

                                <apex:selectList value="{!userExpenseReportSelector.pse__Expense_Report__c}" size="1" id="ExpReports" styleClass="slds-select {!rptLookupErrorClass}">
                                    <apex:selectOptions Value="{!UserExpenseReports}" />
                                </apex:selectList>

                           </div>
                        </div>

                        <div class="slds-form-element">
                            <label class="slds-form-element__label" for="applytoselected">
                                <a href="#" class="apply-to-exp-rpt-btn"
                                    onclick="applyToExpenseReport();return false;">
                                      <i class="fa fa-check"></i>Apply To Selected
                                </a>

                            </label>

                        </div>


                      </div> <!-- end form inline -->
                  </div>
                  <script>
                    // trigger card transactions re-load when resource is changed
                    $(function() {$("input.resourceInput").on("change", function(){setTimeout(refreshCardTransactions, 1)});});
                  </script>
              </apex:outputPanel> <!-- end advanced-filter-panel -->

              <!--
                ** <vlds-maximize-page/>
              -->
              <div onclick="setTimeout(function(){jQuery(window).trigger('resize');}, 5);"
                  class="pull-right slds-size--1-of-6 slds-align-top">
                <span class="pull-right cursor-pointer"
                      onclick="toggleMaxMinApp();"
                      title="Maxime / Minimize page">
                  <i class="fa fa-arrow-circle-down fa-rotate-230 min-max-icon"></i>
                </span>
                <script>

                  var toggleMaxMinApp = function() {
                    var maxAppClassName    = "maximized-app-position";
                    var maxAppSelector     = ".app-root";
                    var minMaxIconSelector = ".min-max-icon";

                    // classes/icons to display when page is maxed/not-maxed...
                    var maxIcon = "fa-rotate-230";
                    var minIcon = "fa-rotate-45";

                    // The page is maximized when the app selector contains the max app class name
                    var isMaxed = jQuery(maxAppSelector).hasClass(maxAppClassName);

                    // remove any existing min/max icon classes, which will be set
                    // accordingly below.
                    jQuery(minMaxIconSelector).removeClass(maxIcon).removeClass(minIcon);

                    if (isMaxed) {
                      // when the app is maxed, we will reset it:
                      // * removes the max app class and sets the max icon for display
                      jQuery(maxAppSelector).first().removeClass(maxAppClassName);  // minimize....
                      jQuery(minMaxIconSelector).addClass(maxIcon);                 // add maxed icon to display
// remove alert texture from page header
//$(".slds-page-header").removeClass("slds-theme--alert-texture");
                    }
                    else {
                      // when the app is NOT maxed, we will maximize it:
                      // * add the max app class and sets the min icon for display
                      jQuery(maxAppSelector).first().addClass(maxAppClassName); // minimize....
                      jQuery(minMaxIconSelector).addClass(minIcon);             // add min icon to display

// inject alert texture into page header when app is max
//$(".slds-page-header").addClass("slds-theme--alert-texture");

                    }
                  }
                </script>
              </div>
              <!--
                ** end <vlds-maximize-page/>
              -->

            </div>
        </div>
        </div>
      </div>
      <!-- end page header -->

      <div style="clear:both ; padding-bottom:15px" />


<!-- define ui-view container -->
<div class="ui-view">

      <!--
          page alert panels.

          VF panel rerendered from action functions
          contains the logic for displaying error or success messages from
          VF controller actions
      -->
      <apex:outputPanel id="page-alert-panel">
          <!--
            success container
          -->
          <div class="successContainer" style="display:none">
              <div class="slds-notify-container"                  style="position:initial" >
                <div class="slds-notify slds-notify--toast slds-theme--success" role="alert"   style="min-height:60px;width:85%;">
                  <span class="slds-assistive-text">Success</span>
                  <button type="button" class="slds-button slds-button--icon-inverse slds-notify__close"
                          onclick='_closeAlert(".successContainer"); return false;'>
                          <i class="fa fa-times" style="font-size: 24px; color: white;"></i>

                          <span class="slds-assistive-text">Close</span>
                  </button>
                  <div class="notify__content slds-grid" >


                    <i class="fa fa-bell" style="font-size: 24px; padding-right:15px;"></i>

                    <div class="slds-col slds-align-middle">
                      <h2 class="slds-text-heading--small"     style="text-align:center;">
                        <apex:outputText value="{!pageSuccessMessage}" escape="false" />
                      </h2>
                    </div>
                  </div>
                </div>

              </div>
            <div style="clear:both ; padding-bottom:15px"></div>
          </div>

          <!--
            list recently saved expense reports, allows the user to quickly link to updated reports:
          -->
          <apex:outputPanel id="updated-expense-reports"
                rendered="{!hasRecentlySavedExpenses}"
                layout="block">

            <div class="updatedExpenseReportContainer">
                <div class="slds-notify-container"                  style="position:initial" >
                  <div class="slds-notify slds-notify--toast slds-theme--alt-inverse" role="alert"   style="min-height:60px;width:85%;">
                    <span class="slds-assistive-text">Updated Expense Reports</span>
                    <button type="button" class="slds-button slds-button--icon-inverse slds-notify__close"
                            onclick='_closeAlert(".updatedExpenseReportContainer"); return false;'>
                            <i class="fa fa-times" style="font-size: 24px; color: white;"></i>

                            <span class="slds-assistive-text">Close</span>
                    </button>
                    <div class="notify__content slds-grid" >


                      <i class="fa fa-check-square-o" style="font-size: 24px; padding-right:15px;"></i>

                      <div class="slds-col slds-align-middle">

                        <h2 class="slds-text-heading--small"     style="text-align:center;">
                          <b>Please go to the Expense Report to complete the submission process.</b>
                        </h2>

                          <div style="margin-top: 2%;text-align: center">
                            <small style="display:inherit;">

                            The following expense reports have been updated, click the report name to review and complete the submission process :
                            </small>

                            <div class="expense-report-list wrapper">


                            <ul style="" class="expense-report-list">
                            <apex:repeat value="{!recentlySavedExpenseReports}" var="savedReport" id="savedExpenseReports">
                              <li style="padding-top:5px;padding-bottom:5px;">

                                <a class="cursor-pointer slds-button slds-button--inverse slds-button--small"
                                   href="/{!savedReport.id}"
                                   target="_blank"
                                   title="Click to complete the submission process.">
                                  {!savedReport.Name}

                                  <i class="fa fa-share" style="padding-left:4px;"></i>

                                </a>

                              </li>
                            </apex:repeat>
                            </ul>

                            </div>



                          </div>

                      </div>

                    </div>
                  </div>

                </div>
              <div style="clear:both ; padding-bottom:15px"></div>
            </div>
            </apex:outputPanel>


          <!--
            error container
          -->
          <div class="errorContainer" style="display:none">
              <div class="slds-notify-container"                                           style="position:initial" >
                <div class="slds-notify slds-notify--toast slds-theme--error" role="alert" style="min-height:60px;width:85%;">
                  <span class="slds-assistive-text">Error</span>
                  <button type="button" class="slds-button slds-button--icon-inverse slds-notify__close"
                          onclick='_closeAlert(".errorContainer"); return false;'>
                          <i class="fa fa-times" style="font-size: 24px; color: white;"></i>

                          <span class="slds-assistive-text">Close</span>
                  </button>
                  <div class="notify__content slds-grid" >
                    <i class="fa fa-exclamation-triangle" style="font-size: 24px; padding-right:15px;"></i>
                    <div class="slds-col slds-align-middle">
                      <h2 class="slds-text-heading--small"     style="text-align:center;">
                        <apex:outputText value="{!pageErrorMessage}" escape="false" />
                      </h2>
                    </div>
                  </div>
                </div>
              </div>

            <div style="clear:both ; padding-bottom:15px"></div>
          </div>
          <script>
            $(function() {
              // hide or show error
              var errorDisplay = ("{! hasPageError }".toLowerCase() === 'true') ? "initial" :"none";
              $(".errorContainer").css({"display":errorDisplay});
              // hide or show success
              var successDisplay = ("{! hasPageSuccess }".toLowerCase() === 'true') ? "initial" :"none";
              $(".successContainer").css({"display":successDisplay});


              // hide card-transaction when signaled.....
              var hideCardTransaction = ("{! hideCardTransactionTable }".toLowerCase() === 'true');
              if (hideCardTransaction) {
                $("#card-transaction-card").css({"display":"none"});
              }

            });


            // -- displays the specific errmsg (single) within the error container, renderit if it doesnet exist!
            var showError = function(errmsg){
              $(".errorContainer h2.slds-text-heading--small").html(errmsg);
              $(".errorContainer").css({"display":"initial"});
            }

            // -- define actions for closing alerts
            // - sets the specific element selectors css display to none
            // - and triggers window resize, to perform table size calculations
            var _closeAlert = function(alertSelector) {

              jQuery(alertSelector).css({"display":"none"});

              // trigger resize, which will execute our cacluateSize
              setTimeout(function(){jQuery(window).trigger('resize');}, 5);



            }


          </script>
      </apex:outputPanel>
      <!-- ** end page alert ** -->


      <!--
                  Filter: Show transaction
                          From date
                          To Date
                          Refresh....
      -->
      <div id="card-transaction-card">
        <div class="slds-card"                          style="background-color: initial;">
            <!-- header -->
            <div class="slds-card__header"              style="background-color: initial">
                <!-- filter grid -->
                <div class="slds-grid">
                    <nav class="slds-col slds-size--1-of-1 slds-form--inline">

                        <!-- show transactions -->
                        <div class="slds-form-element">
                            <label class="slds-form-element__label" for="date">

                                <!-- info button
                                **********
                                -->
                                <button class="slds-button slds-button--neutral slds-no-flex slds-m-horizontal--small"
                                    style="border-radius: 15px;padding-left: 13px;width: 32px;height: 32px;"

                                    onclick="toggleDetailRow('helper-details');return false;">

                                     <span class="helper-details-toggle-detail-btn-container">
                                        <i class="fa fa-info"/>
                                     </span>


                                </button>


                              Show Transactions
                            </label>
                            <div class="slds-form-element__control">
                                <select id="show-transactions" class="slds-select">
                                  <option value="unusedAll">Unused (All)</option>
                                  <option value="unusedCurMonth">Unused (Current Month)</option>
                                  <option value="unusedCurYear">Unused (Current Year)</option>
                                  <option value="unusedToday">Unused (Today)</option>
                                  <option value="unusedCustom">Unused (Custom Date Range)</option>
                                </select>
                            </div>
                        </div> <!-- end form-element show transactions -->


                        <!-- date picker 1 !!!! -->
                        <div class="slds-form-element">
                            <label class="slds-form-element__label" for="date">From</label>
                            <div class="slds-form-element__control">

                                <div class="slds-input-has-icon slds-input-has-icon--right">
                                    <svg aria-hidden="true" class="slds-input__icon slds-icon-text-default">
                                        <use xlink:href="{!URLFOR($Resource.SLDS092,'/assets/icons/utility-sprite/svg/symbols.svg#event')}"></use>
                                    </svg>

                                    <apex:inputField value="{!dtHolderFrom.PSA_Submitted_Date__c}" styleClass="slds-input dtHolderFrom"/>
                                </div>

                            </div>
                        </div>

                        <!-- datepicker 2 -->
                        <div class="slds-form-element">
                            <label class="slds-form-element__label" for="date">To</label>
                            <div class="slds-form-element__control">

                                <div class="slds-input-has-icon slds-input-has-icon--right">
                                    <svg aria-hidden="true" class="slds-input__icon slds-icon-text-default">
                                        <use xlink:href="{!URLFOR($Resource.SLDS092,'/assets/icons/utility-sprite/svg/symbols.svg#event')}"></use>
                                    </svg>

                                    <apex:inputField value="{!dtHolderTo.PSA_Submitted_Date__c}" styleClass="slds-input dtHolderTo"/>

                                </div>
                            </div>
                        </div>

                        <button class="slds-button slds-button--neutral"
                                onclick="return refreshCardTransactions();">
                            Refresh
                        </button>
                    </nav>


                    <nav class="slds-col slds-size--1-of-2">
                        <!--
                          Include buttons only when an expense report has been loaded
                          And there are card transactions
                        -->
                      <div class="slds-button-group" style="float:right">

                           <button class="slds-button slds-button--brand slds-button--small rb-selected-btn"
                                    id="btn-add"
                                    disabled="disabled"
                                    onclick="addCardsToExpenseReport();return false;">
                                    Add to Expense Report</button>

                            <button class="slds-button slds-button--neutral slds-button--small rb-selected-btn"
                                    id="btn-itemize"
                                    disabled="disabled"
                                    onclick="itemizeCardTransaction();return false;">Itemize</button>

                            <button class="slds-button slds-button--neutral slds-button--small"
                                    onclick="window.history.back();return false;">Cancel</button>
                      </div>
                    </nav>
                </div> <!-- end grid -->
            </div>

    <!-- info/helper section helper
    *******
    -->
   <div class="trans-detail-row-helper-details slds-grid slds-grid--align-spread hidden-class"
        style="border-top: 1px solid #eee;
                border-bottom: 3px solid #ccc;
                border-bottom-style: double;
                border-bottom-left-radius: 24px;
                border-bottom-right-radius: 24px;
                box-shadow: 5px 5px 5px;
    ">


      <div class="slds-coach__keys slds-size--1-of-2" style="white-space: normal;border-top: 1px solid #eee;margin-left:15px;margin-top:15px">

        <div class="slds-grid slds-grid--align-spread">
          <h2 class="slds-text-heading--label slds-p-bottom--small" style="padding-top:5px;">
            Expense Card Transactions
          </h2>

          <span class="slds-text-body--small">
            <a href="javascript:void(0);" onclick="toggleDetailRow('helper-details');return false;" title="Click to hide this message box.">
              <i class="fa fa-times"></i>
              Hide this message box
            </a>
          </span>
        </div>

        <dl class="coach__list slds-dl--horizontal">
          <dt class="coach__item slds-dl--horizontal__label" style="padding-left:1rem">Show Transactions</dt>
          <dd class="coach__value slds-dl--horizontal__detail">Select from predefined date ranges or specify the from and to date range.  Click the Refresh button to retrieve transactions for the date range.</dd>
<!--           <dt class="coach__item slds-dl--horizontal__label" style="padding-left:1rem">Refresh</dt>
          <dd class="coach__value slds-dl--horizontal__detail">Retrieve transactions for specific date range.</dd> -->

          <dt class="coach__item slds-dl--horizontal__label" style="padding-left:1rem">Add To Expense Report</dt>
          <dd class="coach__value slds-dl--horizontal__detail">Click to add the checked items to specific expense reports.</dd>

          <dt class="coach__item slds-dl--horizontal__label" style="padding-left:1rem">Itemize</dt>
          <dd class="coach__value slds-dl--horizontal__detail">Click to itemize a transaction.</dd>

        </dl>
      </div>

      <div class="slds-coach__guidance slds-size--1-of-2" style="white-space: normal;margin: 15px;">

        <div class="slds-theme--shade" style="padding-left: 8px; padding-right: 8px; border-bottom-right-radius: 24px;">
          <div style="padding-top: 10px;text-align: center;border-bottom: 1px solid #888;">
            <h2 class="slds-text-heading--label" style="padding-bottom:15px;">Guidance for Success</h2>
          </div>
          <div class="slds-text-longform slds-p-top--medium" style="padding-bottom:20px;">
            <p>
              Select the <a href="javascript:void(0);"
                   onclick="flashInputbackground('th.card-trans-psa-expense-report');return false;">
                   expense report</a> this transaction should be associated with, and the
                   <a href="javascript:void(0);" onclick="flashInputbackground('.th-psaExpenseType');return false;"> expense type</a>
            </p>
            <p>
              <ul>
                <li>
                <a href="javascript:void(0);"
                   onclick="flashInputbackground('.th-billable');return false;">
                   BILLABLE </a> : check this option when the transaction is a billable expense, leave unchecked when non billable.
                </li>
                <li>
                  <a href="javascript:void(0);"
                   onclick="flashInputbackground('.th-personal');return false;">
                  PERSONAL</a> : check this option when transaction is a personal expense
                </li>
                <li>
                  <a href="javascript:void(0);"
                    onclick="flashInputbackground('.th-previouslyEntered');return false;">
                  PREVIOUSLY ENTERED</a> : check this option if you have already processed this transaction
                </li>
                <li>
                  <a href="javascript:void(0);"
                    onclick="flashInputbackground('.th-invalidTransaction');return false;">
                  INVALID TRANSACTION</a> : check this option when the transaction is invalid
                </li>
              </ul>
            </p>
            <p>
            Optionally verify and fill the necessary particulars like
            <a href="javascript:void(0);"
                   onclick="flashInputbackground('.th-incurredCountry');flashInputbackground('.th-incurredState');return false;">
                   incurred location</a>,

            <a href="javascript:void(0);"
                   onclick="flashInputbackground('.-attendees');return false;">
                   attendees</a>,

            <a href="javascript:void(0);"
                   onclick="flashInputbackground('.th-receiptType');return false;">
                   receipt type</a>,

            <a href="javascript:void(0);"
                   onclick="flashInputbackground('.-attachments');return false;">
                   attachments</a>, etc.
            </p>
          </div>
        </div>
      </div>
    </div>


          <!-- body -->
          <div class="slds-card__body wrappercardbody-container ">


<apex:outputPanel id="render-after-add-to-expense-report">
  <script>
      // when the saved trans ids are present...attempt to remove those rows from the page!
      var savedTransIds = "{!savedTransIds}";

      if (savedTransIds != "") {
        savedTransIds.split(",").forEach(function(r){
          hideTransactionRow(r.trim());
          console.log(' hiding trans id = ' + r);
        });

        // count the trs....
        updateNumberOfCardTransHeadingMessage();


      }



  </script>
</apex:outputPanel>


          <!-- re-render this when refreshing data -->
<apex:outputPanel id="card-transaction-wrapper-body">

                <script>
                  // force the dropzone containers to refresh when this panel is re-rendered
                  // * We will maintain the dropzones by parent id in this object!
                  // * e.g parentIdDropzones[<parent-id>] = dropzone-instance
                  //var parentIdDropzones = {};
                  $(function(){
                    resetDropzones();
                  });

                  curPseResource = "{!userExpenseReport.pse__Resource__c}";

                </script>

              <!--
                Panel rendered when there are card transactions associated with the user
              -->
              <apex:outputPanel rendered="{! hasCardTransactions}">

                <div class="slds-scrollable--x slds-scrollable--y " id="CardTransactionPageController"
                style="overflow-y: auto; border-top: 1px solid #ddd;">

                  <table class="slds-table slds-table--bordered slds-no-row-hover tablesorter hasStickyHeaders" id="card-transaction-table">
                      <thead>
                          <tr style="background-color: #f4f6f9;">
                              <th class="slds-text-heading--label slds-size--1-of-10 cursor-pointer th-checkExpand"
                                   style="white-space:nowrap;">
                                  <!-- checkbox...-->
                                  <span>
                                    <label class="slds-checkbox">
                                      <input name="checkbox" type="checkbox" id="select-all" />
                                      <span class="slds-checkbox--faux"></span>
                                    </label>
                                  </span>

                                <button class="slds-button slds-button--neutral slds-no-flex slds-m-horizontal--small expand-collapse-button toggle-header-button"
                                    onclick="toggleHeaderDetailButton();return false;">
                                    <i class="fa fa-chevron-down"></i>
                                </button>

                              </th>

                              <!-- sort able transaction date -->
                              <th class="slds-text-heading--label slds-size--1-of-14 cursor-pointer " scope="col">
                                  Transaction<br/>Date
                              </th>

                              <th class="slds-text-heading--label slds-size--1-of-14 cursor-pointer " scope="col" style="white-space: normal">
                                  Posting<br/>Date
                              </th>

                              <th class="slds-text-heading--label slds-size--1-of-14 cursor-pointer " scope="col">
                                  Description
                              </th>

                              <th class="slds-text-heading--label slds-size--1-of-14 cursor-pointer " scope="col">
                                  Amount
                              </th>

                              <!-- inject expense report, when not coming from expense report page !!!-->
                              <th class="slds-text-heading--label slds-size--1-of-14 card-trans-psa-expense-report " scope="col">
                                  <apex:outputPanel rendered="{!notIsAddFromExpenseReport}">
                                      <i class="fa fa-star required-red" title="required"></i>
                                      <span class="{!rptLookupErrorClass}">
                                        Expense Report
                                      </span>
                                  </apex:outputPanel>
                              </th>

                              <th class="slds-text-heading--label slds-size--1-of-14  th-psaExpenseType" scope="col">
                                <i class="fa fa-star required-red" title="required"></i>
                                <span class="{!expTypeSelectErrorClass}">
                                    PSA Expense Type
                                </span>
                              </th>

                              <th class="slds-text-heading--label slds-size--1-of-14 charge-type-cbox th-billable"
                                   scope="col">
                                <!--
                                   BILLABLE WITH HELP

                                  $(".with-help")

                                  <div class="with-help"
                                        data-label="Billable"
                                        data-inlinehelpclass="card-transaction-billable-inlinehelp"
                                        data-inlinehelptext="Indicates a Billable Expense" />

                                -->
                                <div class="with-help">
                                    <label class="slds-align-middle">
                                      Billable
                                    </label>
                                    <!--
                                      *** placeholder for where we will render our inline help template
                                    -->
                                    <span class="card-transaction-billable-inlinehelp" />

                                </div>
                                <!--
                                  *** END BILLABLE WITH HELP
                                -->
                              </th>
                              <th class="slds-text-heading--label slds-size--1-of-14 charge-type-cbox th-personal" scope="col">

                                <!--
                                  Personal / Personal WITH HELP
                                -->
                                <div class="with-help">
                                    <label class="slds-align-middle">
                                      Personal
                                    </label>

                                    <!--
                                      *** placeholder for where we will render our inline help template
                                    -->
                                    <span class="card-transaction-charge-type-inlinehelp" />

                                </div>
                                <!--
                                  *** END Personal / Personal WITH HELP
                                -->

                              </th>
                              <th class="slds-text-heading--label slds-size--1-of-14 charge-type-cbox th-previouslyEntered" scope="col">
                                <!--
                                  Previously Entered  WITH HELP
                                -->
                                <div class="with-help">
                                    <label class="slds-align-middle">
                                      Previously Entered
                                    </label>

                                    <!--
                                      *** placeholder for where we will render our inline help template
                                    -->
                                    <span class="card-transaction-previously-entered-inlinehelp" />

                                </div>
                                <!--
                                  *** END Previously Entered HELP
                                -->
                                </th>

                              <th class="slds-text-heading--label slds-size--1-of-14 charge-type-cbox th-invalidTransaction" scope="col">
                                <!--
                                  Rejected Or Declined  WITH HELP
                                -->
                                <div class="with-help" style="min-width:94px">
                                    <label class="slds-align-middle">
                                      Invalid Transaction
                                    </label>

                                    <!--
                                      *** placeholder for where we will render our inline help template
                                    -->
                                    <span class="card-transaction-invalid-transaction-inlinehelp" />

                                </div>
                                <!--
                                  *** END Rejected Or Declined with HELP
                                -->
                                </th>



                                <!-- incurred country -->
                                <th class="slds-text-heading--label slds-size--1-of-14 th-incurredCountry">
                                  <div class="with-help">
                                    <label class="slds-align-middle {!incurredCountryErrorClass}">
                                      <i class="fa fa-star required-red" title="required"></i>
                                      <span class="{!incurredCountryErrorClass}">

                                        {!$ObjectType.pse__Expense__c.fields.psa_incurred_country__c.label}

                                          <!-- Incurred Country -->
                                      </span>
                                    </label>
                                    <!--
                                      *** placeholder for where we will render our inline help template
                                    -->
                                    <span class="card-transaction-incurred-country-inlinehelp"
                                          style="white-space: normal"/>
                                  </div>
                                </th>

                                <!-- incurred state -->
                                <th class="slds-text-heading--label slds-size--1-of-14 th-incurredState">
                                  <div class="with-help">
                                      <label class="slds-align-middle">
                                        <span class="{!incurredStateErrorClass}">

                                          <!-- Incurred State -->
{!$ObjectType.pse__Expense__c.fields.PSA_Incurred_State_Province__c.label}

                                        </span>
                                      </label>

                                      <!--
                                        *** placeholder for where we will render our inline help template
                                        TEMPLATE FOR INLINE HELP!
                                      -->
                                      <span class="card-transaction-incurred-state-or-province-inlinehelp"
                                            style="white-space: normal"/>
                                      <!-- END TEMPLATE FOR INLINE HELP! -->
                                  </div>


                                </th>

                                <!-- receipt type -->
                                <th class="slds-text-heading--label slds-size--1-of-14 th-receiptType">
                                    <div class="with-help">
                                      <label class="slds-align-middle">
                                          <!-- Receipt Type -->

{!$ObjectType.pse__Expense__c.fields.PSA_Receipt_Type__c.label}
                                      </label>
                                      <!--
                                        *** placeholder for where we will render our inline help template
                                        TEMPLATE FOR INLINE HELP!
                                      -->
                                      <span class="card-transaction-receipt-type-inlinehelp"
                                            style="white-space: normal"/>
                                      <!-- END TEMPLATE FOR INLINE HELP! -->
                                    </div>
                                </th>
                          </tr>
                      </thead>

                      <tbody class="card-trans-tbody">

                          <apex:variable var="trcolor" value="even"/>
                          <apex:repeat value="{!cardTransactionWrappers}" var="wrapper" id="cardTransactionWrappers">
                            <apex:variable var="trcolor" value="{!IF(trcolor == 'odd', 'even', 'odd')}"/>
                               <tr id="{!wrapper.cardTransaction.Id}" class="tr-color-{!trcolor} tr-trans-item">
                                  <td style="border-right:1px solid #eee; border-bottom-left-radius: 25px;">

                                    <!-- checkbox...-->
                                    <span>
                                      <label class="slds-checkbox cbox-checked-flash">

                                        <apex:inputCheckbox styleClass="chk_trans {!wrapper.cardTransaction.Id}-cbox"
                                          id="chk_trans"
                                          value="{!wrapper.selected}"/>

                                        <span class="slds-checkbox--faux"></span>
                                      </label>
                                    </span>



                                      <button class="slds-button slds-button--neutral slds-no-flex slds-m-horizontal--small expand-collapse-button toggle-row-button"
                                          onclick="toggleDetailRow('{!wrapper.cardTransaction.Id}');return false;">
                                             <span class="{!wrapper.cardTransaction.Id}-toggle-detail-btn-container">
                                                <i class="fa fa-chevron-down"/>
                                             </span>
                                      </button>


<script>
        // autoexpand on page load!
        // $(function(){ toggleDetailRow('{!wrapper.cardTransaction.Id}') });
</script>


<!--
                                          This is the information displayed in the modal pop-up.
                                          Were going to build it here then inject into the modal
                                          when the details button is clicked
                                      -->
                                      <span style="display:none">

<span id="hidden-trans-details-{!wrapper.cardTransaction.Id}">
  <table>
      <tr>
        <td><b>Transaction Id</b></td>
        <td>
          <a href="/{!wrapper.cardTransaction.id}" target="_blank">

            <apex:outputField value="{!wrapper.cardTransaction.PSA_Transaction_Id__c}"/>
          </a>
        </td>
      </tr>
      <tr>
        <td><b>Transaction Date</b></td>
        <td><apex:outputField value="{!wrapper.cardTransaction.PSA_Transaction_Date__c}"/></td>
      </tr>

      <tr>
        <td><b>Posting Date</b></td>
        <td><apex:outputField value="{!wrapper.cardTransaction.PSA_Posting_Date__c}" /></td>
      </tr>
      <tr>
        <td><b>Status</b></td>
        <td><apex:outputField value="{!wrapper.cardTransaction.PSA_Status__c}" /></td>
      </tr>

      <tr>
        <td><b>Amount in Original Currency </b></td>
        <td><apex:outputField value="{!wrapper.cardTransaction.PSA_Amount_in_Original_Currency__c}" /></td>
      </tr>
      <tr>
        <td><b>FX</b></td>
        <td><apex:outputField value="{!wrapper.cardTransaction.PSA_FX__c}" /></td>
      </tr>


      <tr>
        <td><b>Expense Type</b></td>
        <td><apex:outputField value="{!wrapper.cardTransaction.PSA_Expense_Type__c}" /></td>
      </tr>

      <tr>
        <td><b>Merchant Name</b></td>
        <td><apex:outputField value="{!wrapper.cardTransaction.PSA_Merchant_Name__c}"/></td>
      </tr>
      <tr>
        <td><b>Merchant State / Province</b></td>
        <td><apex:outputField value="{!wrapper.cardTransaction.PSA_Merchant_State_Province__c}" /></td>
      </tr>

      <tr>
        <td><b>Merchant Postal Code</b></td>
        <td><apex:outputField value="{!wrapper.cardTransaction.PSA_Merchant_Postal_Code__c}" /></td>
      </tr>
      <tr>
        <td><b>Merchant Country Code</b></td>
        <td><apex:outputField value="{!wrapper.cardTransaction.PSA_Merchant_Country_Code__c}" /></td>
      </tr>

      <tr>
        <td><b>Employee Id </b></td>
        <td><apex:outputField value="{!wrapper.cardTransaction.PSA_EmployeeId__c}" /></td>
      </tr>
      <tr>
        <td><b>Charge Type</b></td>
        <td><apex:outputField value="{!wrapper.cardTransaction.PSA_Charge_Type__c}" /></td>
      </tr>

      <tr>
        <td><b>Processor Transaction Id</b></td>
        <td><apex:outputField value="{!wrapper.cardTransaction.PSA_Processor_Transaction_Id__c}" /></td>
      </tr>
      <tr>
        <td><b>PSA Resource</b></td>
        <td><apex:outputField value="{!wrapper.cardTransaction.PSA_Resource__c}" /></td>
      </tr>
<!--
      <tr>
        <td><b>Resource Inactive</b></td>
        <td><apex:outputField value="{!wrapper.cardTransaction.PSA_Resource_Inactive__c}" /></td>
      </tr>

       <tr>
        <td><b>Operations Review</b></td>
        <td><apex:outputField value="{!wrapper.cardTransaction.PSA_Operations_Review__c}" /></td>
      </tr>

      <tr>
        <td><b>Operations Review Reason</b></td>
        <td><apex:outputField value="{!wrapper.cardTransaction.PSA_Operations_Review_Reason__c}" /></td>
      </tr> -->

      <tr>
        <td><b>Incurred State</b></td>
        <td><apex:outputField value="{!wrapper.cardTransaction.PSA_Incurred_State_Province__c}" /></td>
      </tr>

      <tr>
        <td><b>Incurred Country</b></td>
        <td><apex:outputField value="{!wrapper.cardTransaction.PSA_Incurred_Country__c}" /></td>
      </tr>

  </table>
</span>

                                        </span>

                                    </td>

                                    <!-- transaction date -->
                                    <td class="white-space-normal {!wrapper.cardTransaction.id}-trans-date"
                                        data-date-frmt="{!wrapper.transactionDateFormatted}">



                                        <apex:outputField value="{!wrapper.cardTransaction.PSA_Transaction_Date__c}" styleClass="cardTransactionDate"/>

                                        <!-- // ... this is the value to use when matching previous.... -->





                                    </td>

                                    <!-- posting date -->
                                    <td class="white-space-normal">
                                      <apex:outputField value="{!wrapper.cardTransaction.PSA_Posting_Date__c}" />
                                    </td>

                                    <!-- Description -->
                                    <td class="white-space-normal {!wrapper.cardTransaction.id}-trans-description">
                                      {!wrapper.cardTransaction.PSA_Merchant_Name__c} {!wrapper.cardTransaction.PSA_Merchant_State_Province__c}, {!wrapper.cardTransaction.PSA_Merchant_Country_Code__c}
                                    </td>

                                    <!-- Amount -->
                                    <td class="white-space-normal {!wrapper.cardTransaction.id}-trans-amount"
                                        data-sort-value="{!wrapper.cardTransaction.PSA_Amount_in_Original_Currency__c}">

                                      <!--
                                        when card transaction is itemized
                                        the orginal amount is rendered as a strike throuhg
                                        with the new 'remaining amount' rendered below.
                                      -->
                                      <apex:outputPanel rendered="{! wrapper.cardTransaction.PSA_Assigned_Itemized_Amount__c > 0}">

                                        <!-- strikethrough the original amount -->
                                        <div style="text-decoration: line-through; color:red">
                                            <span style="color:initial;">
                                              <apex:outputField value="{!wrapper.cardTransaction.PSA_Amount_in_Original_Currency__c }"/>
                                            </span>
                                        </div>

                                        <!-- render remaining non-itemized amount -->
                                        <apex:outputField value="{! wrapper.cardTransaction.PSA_Remaining_Transaction_Amount__c }"/>
                                      </apex:outputPanel>

                                      <!-- panel rendered when no positive itemized amounts exist -->
                                      <apex:outputPanel rendered="{! wrapper.cardTransaction.PSA_Assigned_Itemized_Amount__c <= 0}">

                                          <apex:outputField value="{!wrapper.cardTransaction.PSA_Amount_in_Original_Currency__c }"/>

                                      </apex:outputPanel>
                                    </td>

                                    <!-- expense report column, only needed on expense card transaction screen-->
                                    <td class="card-trans-psa-expense-report white-space-normal">
                                        <div class="slds-form-element">

                                        <apex:outputPanel rendered="{!notIsAddFromExpenseReport}">
                                              <div style="" class="select-size-wrapper">

                                         <!--      <apex:inputField value="{!wrapper.cardTransaction.PSA_Expense_Report__c }" styleClass="slds-input" onchange="toggleExpenseReportClearIcon()" /> -->

                                                <apex:selectList value="{!wrapper.cardTransaction.PSA_Expense_Report__c}"
                                                    size="1"
                                                    id="ExpReports1"
                                                    styleClass="slds-select {!wrapper.cardTransaction.id}-expense-report"
                                                    onchange="toggleExpenseReportClearIcon()">
                                                <apex:selectOptions Value="{!UserExpenseReports}" />
                                                </apex:selectList>

                                              </div>

<!--                                               <div style="float:left;padding-left:5px;padding-top:10px;display:none"
                                                    class="clear-{!wrapper.cardTransaction.Id}">

                                                  <a href="#" onclick="$('#{!wrapper.cardTransaction.Id} span.lookupInput input').val('');toggleExpenseReportClearIcon();return false;"
                                                  title="Click to clear Expense Report">
                                                    <i class="fa fa-ban" style="color: #c23934;"></i>
                                                  </a>

                                              </div> -->

                                        </apex:outputPanel>

                                        </div>
                                    </td>

                                    <!-- expense type -->
                                    <td class="white-space-normal select-size-wrapper td-psaExpenseType"
                                        data-sort-value="{!wrapper.cardTransaction.PSA_Expense_Type__c}">

                                        <apex:inputField value="{!wrapper.cardTransaction.PSA_Expense_Type__c}" styleClass="slds-select {!wrapper.cardTransaction.id}-expense-type"/>
                                    </td>

                                    <!-- billable -->
                                    <td class="charge-type-cbox white-space-normal td-billable">
                                      <!-- checkbox...-->
                                      <span>

                                        <label class="slds-checkbox {!wrapper.cardTransaction.id}-billable" >
                                          <apex:inputCheckbox styleClass="{!wrapper.cardTransaction.id}-cbritem {!wrapper.cardTransaction.id}-bcheck"
                                                              value="{!wrapper.billable}"
                                                              onclick="evalBillPersonalChecks('{!wrapper.cardTransaction.id}', 'bcheck', 'cbritem')"/>

                                          <span class="slds-checkbox--faux" title="Billable"></span>
                                        </label>
                                      </span>

                                    </td>

                                    <!-- personal -->
                                    <td class="charge-type-cbox white-space-normal td-personal">
                                      <span>
                                        <label class="slds-checkbox {!wrapper.cardTransaction.id}-personal" >
                                          <apex:inputCheckbox styleClass="{!wrapper.cardTransaction.id}-cbritem {!wrapper.cardTransaction.id}-pcheck"
                                                              value="{!wrapper.personal}"
                                                              onclick="evalBillPersonalChecks('{!wrapper.cardTransaction.id}','pcheck', 'cbritem')"/>

                                          <span class="slds-checkbox--faux" title="Personal"></span>
                                        </label>
                                      </span>
                                    </td>

                                    <!-- previously entered -->
                                    <td class="charge-type-cbox white-space-normal td-previouslyEntered">
                                      <span>
                                        <label class="slds-checkbox {!wrapper.cardTransaction.id}-previously-entered" >
                                          <apex:inputCheckbox styleClass="{!wrapper.cardTransaction.id}-cbritem {!wrapper.cardTransaction.id}-prevcheck"
                                                              value="{!wrapper.previouslyEntered}"
                                                              onclick="evalBillPersonalChecks('{!wrapper.cardTransaction.id}','prevcheck', 'cbritem')"/>
                                          <span class="slds-checkbox--faux" title="Previously Entered"></span>
                                        </label>
                                      </span>
                                    </td>

                                    <!-- invalid transaction -->
                                    <td class="charge-type-cbox white-space-normal td-invalidTransaction">
                                      <span>
                                        <label class="slds-checkbox {!wrapper.cardTransaction.id}-rejected-or-declined" >
                                          <apex:inputCheckbox styleClass="{!wrapper.cardTransaction.id}-cbritem {!wrapper.cardTransaction.id}-rejectedcheck"
                                                              value="{!wrapper.invalidTransaction}"
                                                              onclick="evalBillPersonalChecks('{!wrapper.cardTransaction.id}','rejectedcheck', 'cbritem')"/>
                                          <span class="slds-checkbox--faux" title="Invalid Transaction"></span>
                                        </label>
                                      </span>

                                    </td>

                                    <!-- incurred country -->
                                    <td class="td-incurredCountry">
                                      <!--
                                        *** Incurred country with help
                                      -->
                                      <div class="slds-form">
                                        <div class="slds-form-element is-required" style="padding-bottom:10px;">
                                          <div class="slds-form-element__control {!wrapper.cardTransaction.id}-incurred-country">
                                                <apex:inputField value="{!wrapper.expense.PSA_Incurred_Country__c}"
                                                                  styleClass="slds-input ">
                                                </apex:inputField>
                                          </div>
                                        </div>
                                      </div>
                                      <!--
                                        *** END Incurred country with help
                                      -->
                                    </td>

                                    <!-- incurred state -->
                                    <td class="td-incurredState">
                                      <!--
                                        *** Incurred state or province with help
                                      -->
                                      <div class="slds-form">
                                        <div class="slds-form-element" style="padding-bottom:10px;">

                                          <div class="slds-form-element__control {!wrapper.cardTransaction.id}-incurred-state">


                                          <!--
                                              as a picklist to choose from!
                                          -->
                                          <apex:selectList value="{!wrapper.expense.PSA_Incurred_State_Province__c}"
                                                          size="1"
                                                          styleClass="slds-select"
                                                          style="height:34px">
                                              <apex:selectOptions value="{!incurredStateProvOptions}"/>
                                          </apex:selectList>



                                          </div>
                                        </div>
                                      </div>
                                      <!--
                                        *** END Incurred state or province with help
                                      -->
                                    </td>

                                    <!-- receipt type -->
                                    <td class="td-receiptType" style="white-space: nowrap">
                                       <!--
                                        *** Receipt Type
                                      -->
                                      <div class="slds-form">
                                        <div class="slds-form-element" style="padding-bottom:10px;">


                                          <div class="slds-form-element__control {!wrapper.cardTransaction.id}-receipt-type">

                                            <apex:inputField value="{!wrapper.expense.PSA_Receipt_Type__c}" styleClass="slds-select {!rptLookupErrorClass}" />

                                            <span id="{!wrapper.cardTransaction.id}-hasAttachments">
                                                <!-- rendered when there are attachments on the card trans -->
                                                <apex:outputPanel rendered="{! wrapper.hasAttachments }">
                                                    <span class="hasAttachmentYes">

                                                        <i class="fa fa-check" title="Has Attachments"></i>
                                                    </span>
                                                </apex:outputPanel>
                                                <!-- rendered when there are NO attachments on the card trans  -->
                                                <apex:outputPanel rendered="{! !wrapper.hasAttachments }">
                                                    <span class="hasAttachmentNo">
                                                        <i class="fa fa-chain-broken" title="No Attachments"></i>
                                                    </span>

                                                </apex:outputPanel>
                                            </span>
                                            <span id="{!wrapper.cardTransaction.id}-hasAttachments-spinner" style="display:none">
                                                <img src="{!URLFOR($Resource.SLDS092,'/assets/images/spinners/slds_spinner.gif')}"
                                                     alt="Loading..." style="height:34px"/>
                                            </span>


                                          </div>
                                        </div>
                                      </div>
                                      <!--
                                        *** END Receipt Type
                                      -->
                                    </td>

                                </tr>

                                <tr class="trans-detail-row-{!wrapper.cardTransaction.id} hidden-class expand-child tr-color-{!trcolor}">

<!--                                 <td colspan="1" valign="middle" style="border-top:0px;border-right:1px solid #eee;">

                                </td> -->
                                  <td colspan="14" style="border-top:0px; border-bottom:1px solid #eee;
                                  padding-left:0;padding-top:0;padding-right:0;"
                                     class="slds-theme--shade slds-theme--alert-texture">
                                    <div style="min-height:50px; padding-bottom:12px;">

<div style="border-bottom: 3px solid #ccc;
              border-bottom-right-radius: 24px;
              border-bottom-left-radius: 24px;
              padding-bottom: 19px;
              padding-left:115px;
              border-right:1px solid #eee;
              box-shadow: 5px 5px 5px;"
              class="slds-theme--default">

  <div class="slds-grid slds-grid--align-spread"
       style="border-bottom: 1px solid #eee; padding-left:6px;padding-top:6px;">
        <div class="slds-coach__keys slds-size--1-of-4 m--left-x-large">

          <div class="slds-grid slds-grid--align-spread">
            <h2 class="slds-text-heading--label slds-p-bottom--small">Additional Expense Fields</h2>

            <div class="pull-right">
              <span class="slds-text-body--small">
                    <!-- drop down help info -->
                    <div class="slds-dropdown-trigger" style="padding-left:5px;" >
                      <a href="#"
                         onclick="showDetailsModal('{! wrapper.cardTransaction.Id }', '{! JSENCODE(wrapper.cardTransaction.PSA_Merchant_Name__c) } '); return false;">
                          Transaction Details
                          <i class="fa fa-info-circle"></i>
                      </a>

                      <div class="slds-dropdown slds-dropdown--bottom slds-dropdown--left slds-nubbin--bottom-left
                      slds-theme--inverse"
                            style="min-width:200px;">

                        <ul class="slds-dropdown__list" role="menu">
                          <li id="menu-0-0" class="slds-dropdown__item">
                          <p class="-transaction-details-link-inlinehelp inlinehelp-class">Click to view this card transaction details</p>

                          </li>
                        </ul>
                      </div>
                    </div>
              </span>
            </div>

          </div>

          <div class="slds-coach__guidance" style="padding-left:12px;">
                <!--
                  *** Milestone with optional help
                -->
                <div class="slds-form--inline">
                  <div class="slds-form-element" style="padding-bottom:10px;">
                    <div class="slds-form-element__label" style="width:100px;">
                      <label class="slds-align-middle">
                        <!-- Milestone -->
                        {!$ObjectType.pse__Expense__c.fields.pse__Milestone__c.label}
                        <!--
                          *** placeholder for where we will render our inline help template
                          TEMPLATE FOR INLINE HELP!
                        -->
                        <span class="card-transaction-expense-milestone-inlinehelp"/>
                        <!-- END TEMPLATE FOR INLINE HELP! -->
                      </label>

                    </div>
                    <div class="slds-form-element__control {!wrapper.cardTransaction.id}-milestone" style="width:85%">
                          <apex:inputField value="{!wrapper.expense.pse__Milestone__c}"
                                            styleClass="slds-input ">
                          </apex:inputField>
                    </div>
                  </div>
                </div>
                <!--
                  *** END milestone
                -->

                <!--
                  *** non billable amount with optional help
                -->
                <div class="slds-form--inline">
                  <div class="slds-form-element" style="padding-bottom:10px;padding-top:10px;">
                    <div class="slds-form-element__label" style="width:100px; white-space: normal;vertical-align: bottom">
                      <label class="slds-align-middle">
                        {!$ObjectType.pse__Expense__c.fields.pse__Non_Billable_Incurred_Amount__c.label}

                        <!--
                          *** placeholder for where we will render our inline help template
                          TEMPLATE FOR INLINE HELP!
                        -->
                        <span class="card-transaction-expense-nonbillable-inlinehelp"/>
                        <!-- END TEMPLATE FOR INLINE HELP! -->
                      </label>

                    </div>
                    <div class="slds-form-element__control {!wrapper.cardTransaction.id}-non-billable-amount" style="width:85%">
                          <apex:inputField value="{!wrapper.expense.pse__Non_Billable_Incurred_Amount__c}"
                                            styleClass="slds-input ">
                          </apex:inputField>
                    </div>
                  </div>
                </div>
                <!--
                  *** END non billable amount
                -->

          </div>
        </div>


        <!--
        ATTENDEES
        -->
        <div class="slds-coach__guidance slds-size--1-of-4 slds-m-left--x-large" style="white-space: normal">

            <div class="expanded-transaction-padding"> </div>

                <!--
                  *** Attendees
                -->
                <div class="slds-form">
                  <div class="slds-form-element" style="padding-bottom:10px;">
                    <div class="slds-form-element__label">
                      <label class="slds-align-middle">Attendees</label>

                      <!--
                        *** placeholder for where we will render our inline help template
                        TEMPLATE FOR INLINE HELP!
                      -->
                      <span class="card-transaction-expense-attendees-inlinehelp"/>
                      <!-- END TEMPLATE FOR INLINE HELP! -->
                    </div>

                    <div class="slds-form-element__control">

                      <apex:inputField value="{!wrapper.expense.PSA_Attendees__c}"
                            styleClass="slds-textarea"
                            style="min-height:175px;"/>


                    </div>
                  </div>
                </div>
                <!--
                  *** END Attendees
                -->
        </div>

        <!--
        NOTES
        -->
        <div class="slds-coach__guidance slds-size--1-of-4 slds-m-left--x-large" style="white-space: normal">

            <div class="expanded-transaction-padding"> </div>

                <!--
                  *** Notes
                -->
                <div class="slds-form">
                  <div class="slds-form-element" style="padding-bottom:10px;">
                    <div class="slds-form-element__label">
                      <label class="slds-align-middle">Notes</label>

                      <!--
                        *** placeholder for where we will render our inline help template
                        TEMPLATE FOR INLINE HELP!
                      -->
                      <span class="card-transaction-notes-attendees-inlinehelp"/>
                      <!-- END TEMPLATE FOR INLINE HELP! -->
                    </div>

                    <div class="slds-form-element__control">

                      <apex:inputField value="{!wrapper.expense.pse__Notes__c}"
                            styleClass="slds-textarea"
                            style="min-height:175px;"/>


                    </div>
                  </div>
                </div>
                <!--
                  *** END Attendees
                -->
        </div>

        <div class="slds-coach__guidance slds-size--1-of-4 slds-m-left--x-large" style="margin-right:12px">

        <div class="expanded-transaction-padding"> </div>

        <!--
          ATTACHMENTS
        -->
        <div class="slds-form slds-theme--shade">
            <div class="slds-form-element" style="padding-bottom:10px;">
                    <div class="slds-form-element__label" style="padding-top: 6px;padding-left: 6px;">
                      <label class="slds-align-middle">Attachments</label>

                      <!--
                        *** placeholder for where we will render our inline help template
                        TEMPLATE FOR INLINE HELP!
                      -->
                      <span class="card-transaction-expense-attachment-inlinehelp"/>
                      <!-- END TEMPLATE FOR INLINE HELP! -->

                    </div>

                    <div class="slds-form-element__control">

                          <!--
                              progress spinner displayed when loading attachments
                           -->
                          <div class="inner-spinner-{! wrapper.cardTransaction.id } slds-spinner--medium"
                               style="display:none">
                              <img src="{!URLFOR($Resource.SLDS092,'/assets/images/spinners/slds_spinner.gif')}" alt="Loading..."
                              style="width: 56px;height: 56px;"/>
                          </div>

  <!-- DROP ZONE HERE !!!!!!! -->

                        <div id="dropzone-{! wrapper.cardTransaction.Id }"
                             class="dropzone"

                             data-parent-id="{!wrapper.cardTransaction.id}">

                             <div class="dz-message">Drop files here or click to upload.</div>
                        </div>


                    </div>
                  </div>
                </div>


        <!--
        **** end attachments
        -->
        </div>

      </div>


      <div style="padding-top:20px">
        <!--
          Include buttons only when an expense report has been loaded
          And there are card transactions
        -->
        <apex:outputPanel rendered="{! (expenseReportLoaded || notIsAddFromExpenseReport) && hasCardTransactions }">

          <!-- map expense -->
          <div style="padding-left:15px; display:inline">
            <button class="slds-button slds-button--brand"
                    onclick="popupExpenseReportLookup('{!wrapper.cardTransaction.id}');return false;">
                Match card transaction with an existing expense
            </button>
          </div>

          <apex:outputPanel rendered="false">
              <!-- not sure were ready for concept and saving one at a time,
              coupled with some remoteObjects/remoteAction could potentially make the page 2 to 3 times faster...
               -->
              <div class="pull-right" style="padding-right:25px;display:inline">
                <button class="slds-button slds-button--brand slds-button--small xrb-selected-btn"

                        onclick="addItemToExpenseReport('{!wrapper.cardTransaction.id}');return false;">
                        Add Item to Expense Report

                  </button>

                <button class="slds-button slds-button--neutral slds-button--small xrb-selected-btn"
                        onclick="itemizeCardTransaction('{!wrapper.cardTransaction.id}');return false;">
                        Itemize Item
                </button>
              </div>
          </apex:outputPanel>
        </apex:outputPanel>
      </div>
</div>


                                    </div>

                                  </td>

                                </tr>
                            </apex:repeat>
                        </tbody>

                        <tfoot>
                            <tr style="background-color: #f4f6f9;">
                              <td colspan="14"> &nbsp; </td>
                            </tr>
                        </tfoot>
                    </table>

                  </div>

                </apex:outputPanel> <!-- end hasCardTransactions==true -->

                <!--
                  Panel rendered when there are NO card transactions associated for the user
                -->
                <apex:outputPanel rendered="{! ! hasCardTransactions}">
                  <div class="slds-notify slds-notify--alert slds-theme--error slds-theme--alert-texture" role="alert">
                      <h2>
                          <i class="fa fa-ban" style="padding-right:15px;"></i>  No Pending Transactions Found.
                      </h2>
                  </div>
                </apex:outputPanel>

                <!--
                    scripts called when this panel is re-rendered
                    sets up logic for buttons and checkboxes...
                -->
                <script>
                  $(function(){
                    bindCardTransactionWrapperBody("{! cardTransactionWrappers.size }");
                });
                </script>

          </apex:outputPanel> <!-- end card-transaction-wrapper-body -->

          </div> <!-- end card body -->

          <div class="slds-card__footer wrappercardfooter-container">
              <!-- re-render this when refreshing data -->
              <apex:outputPanel id="card-transaction-wrapper-footer">
                      <div class="slds-grid">
                          <nav class="slds-col slds-size--1-of-1">
                              <!--
                                Include buttons only when an expense report has been loaded
                                And there are card transactions
                              -->
                              <apex:outputPanel rendered="{! (expenseReportLoaded || notIsAddFromExpenseReport) && hasCardTransactions }">

                                  <button class="slds-button slds-button--brand slds-button--small rb-selected-btn"
                                          id="btn-add"
                                          disabled="disabled"
                                          onclick="addCardsToExpenseReport();return false;">
                                          Add to Expense Report</button>
                                  <button class="slds-button slds-button--neutral slds-button--small rb-selected-btn"
                                          id="btn-itemize"
                                          disabled="disabled"
                                          onclick="itemizeCardTransaction();return false;">Itemize</button>
                              </apex:outputPanel>

                              <button class="slds-button slds-button--neutral slds-button--small"
                                      onclick="window.history.back();return false;">Cancel</button>
                          </nav>
                      </div>
                </apex:outputPanel> <!-- end card-transaction-wrapper-footer -->
          </div> <!-- end footer -->
        </div> <!-- end card -->
      </div>

<!-- **************************************************************************************** -->
<!-- itemized ui -->
<!-- **************************************************************************************** -->

            <!--
              panel for working with itemized card transactions
            -->

            <apex:outputPanel id="itemized-card-transaction-wrapper">
                <script>
                  // ------------------------------------------------------------
                  // called when the "itemized-card-transaction" is rendered
                  // ------------------------------------------------------------
                  $(function(){
                    $("#overlay-spinner").css({"display":"none"});   // ensure the spinner is hidden

                    // when the vf controller specifies it "hasItemizedCardTransactions"
                    // then render itemized screen
                    // otherwise render card transactions
                    if ("{!hasItemizedCardTransaction}".toLowerCase() == "true") {
//                      $("#card-transaction-card").css({"display":"none"}); // hide the listing of all card transactions
                      $("#itemized-expense-card").css({"display":"initial"}); // display the itemized card transaction

                      $(".apply-to-exp-rpt-btn").css({"display":"none"});//hide the 'apply to exp report button' from the itemized screen

                    }
                    else {
                      // remove the itemized transaction from the row....if specified
                      // remove this row from the table!!!!

                      var isItemizedTransactionSaved = "{!isItemizedTransactionSaved}".toLowerCase() == "true";
                      var savedTransId = "{!transactionIdSaved}";

                      if (isItemizedTransactionSaved && savedTransId != "") {
                        // remove the itemized transaction from the current displayed list
                        hideTransactionRow(savedTransId);

                      }

                      $("#itemized-expense-card").css({"display":"none"});   // hide the itemized card transaction

                      $(".apply-to-exp-rpt-btn").css({"display":""});//ensure the 'apply to exp report button' is enabled
                    }
                    try{
                      calculateItemizedAmounts();
                    } catch(e){}
                  });
              </script>

              <apex:outputPanel id="itemized-card-transaction" rendered="{! hasItemizedCardTransaction }">
                <!--
                  logic called when rendering itemized card transactions
                -->
                <script>
                  // --- action behind the cancel itemizations
                  var cancelItemization = function() {
                    $("#overlay-spinner").css({"display":"initial"}); // display spinner
                    cancelItemizeUserCardTransaction(); // call vforce method to set page options accordingly
                  }

                  // define select-all logic when dom is ready
                  $(function(){
                      // logic to enable /disable buttons based on radio button selections
                      var enabledItemizedButtonsOnChkBox = function() {
                          if ($(".chk_i_trans:checked").length > 0) {
                            $(".rb-i-selected-btn").prop("disabled", "");
                          }
                          else {
                            $(".rb-i-selected-btn").prop("disabled", "disabled");
                          }
                      }
                      enabledItemizedButtonsOnChkBox();

                      // enable/disable btns when checkeboxes are clicked!
                      $(".chk_i_trans").on("click", function(){
                        enabledItemizedButtonsOnChkBox();
                        $("#select-all").prop("checked", false);
                      });

                      // check all / de-check all when select-all is checked/unchecked....
                      $("#select-all-itemized").on("click", function(){
                          var isChecked = $(this).is(':checked');
                          $(".chk_i_trans").prop('checked', isChecked);
                          enabledItemizedButtonsOnChkBox();
                      });

                      // auto select expense report on itemized modal window, based on the specific expense report rows values
                      var notIsAddFromExpenseReport = "{! notIsAddFromExpenseReport }".toLowerCase() === 'true';
                      if (notIsAddFromExpenseReport) {
                        // auto select expense report based on row selection....
                        var cardTransId = "{!itemizedTransWrapper.cardTransaction.id }";
                        var selectedVal = $("." + cardTransId + "-expense-report").val();
                        $(".itemize-expense-report").val(selectedVal);

                      }

                  });

                </script>

                <!--
                  Itemize Transaction - Multiple Expenses
                -->
                <div id="itemized-expense-card"   style="display:none; z-index: 9999">


<!-- $("#itemize-card-modal").addClass("overlay") -->

                <!-- dialog for our itemized trans -->

    <!-- wrap our itemize trans in a modal !!! -->
    <div class="slds class" id="itemize-card-modal">

      <div aria-hidden="false" role="dialog" class="slds-modal slds-fade-in-open"    style="bottom: initial;">
        <div class="slds-modal__container"
                       style="max-width:95%;
                        width:95%;
                   max-height:800px;">

          <div class="slds-modal__header slds-text-heading--label">
            <h2 class="slds-text-heading--medium">Itemize Transaction - Multiple Expenses</h2>
          </div>
          <div class="slds-modal__content">
              <div id="modal-content">

                  <!--
                    error container
                  -->
                  <div class="errorContainer" style="display:none">
                      <div class="slds-notify-container"                                           style="position:initial" >
                        <div class="slds-notify slds-notify--toast slds-theme--error" role="alert" style="min-height:60px;width:85%;">
                          <span class="slds-assistive-text">Error</span>
                          <button class="slds-button slds-button--icon-inverse slds-notify__close"
                                  onclick='$(".errorContainer").css({"display":"none"}); return false;'>
                                  <i class="fa fa-times" style="font-size: 24px; color: white;"></i>
                                  <span class="slds-assistive-text">Close</span>
                          </button>
                          <div class="notify__content slds-grid" >
                            <i class="fa fa-exclamation-triangle" style="font-size: 24px; padding-right:15px;"></i>
                            <div class="slds-col slds-align-middle">
                              <h2 class="slds-text-heading--small"     style="text-align:center;">
                                <apex:outputText value="{!pageErrorMessage}" escape="false" />
                              </h2>
                            </div>
                          </div>
                        </div>
                      </div>
                    <div style="clear:both ; padding-bottom:15px"></div>
                  </div>

                    <div class="slds-card"                          style="background-color: initial;">
                      <div class="slds-card__header"                style="background-color: initial;">
                          <div class="slds-grid">
                              <div class="slds-col slds-has-flexi-truncate">
                                    <h2 class="slds-text-heading--medium"></h2>
                              </div>
                          </div>

                          <div class="slds-grid">
                              <div class="slds-col slds-align-middle">
                                <b> Transaction: </b>
                                    {!itemizedTransWrapper.cardTransaction.PSA_Merchant_Name__c } {!itemizedTransWrapper.cardTransaction.PSA_Merchant_State_Province__c}
                              </div>
                              <div class="slds-col slds-align-middle">
                                <b> Date:</b>
                                <apex:outputField value="{!itemizedTransWrapper.cardTransaction.PSA_Transaction_Date__c}" />

                              </div>
                              <div class="slds-col slds-align-middle">
                                  <div style="vertical-align:middle;">

                                     <b> Amount: </b>

                                      <apex:outputField value="{!itemizedTransWrapper.cardTransaction.PSA_Remaining_Transaction_Amount__c }"/>

                                      <input type="hidden" id="itemizedCardAmount" value="{!itemizedTransWrapper.cardTransaction.PSA_Remaining_Transaction_Amount__c }"/>



                                  </div>
                              </div>

                              <div class="slds-col slds-no-flex slds-align-bottom"        style="margin-right:8%">
                                <div class="slds-grid">


              <!--
                  Advanced filter; only rendered when not adding from expense report
              -->
              <apex:outputPanel id="itemized-advanced-filter-panel" rendered="false">
                  <div class="slds-col slds-align-top slds-size--4-of-4 ">

                      <div class="slds-form--inline">
                        <!-- expense report lookup -->
                        <div class="slds-form-element" style="text-align:right">
                            <label class="slds-form-element__label" for="date">
                                Expense Report

<!--                               <br/>
                              <a href="#" class=""
                                 onclick="showExpenseReportModal();return false;">Create New Expense Report
                              </a> -->
                            </label>
                            <div class="slds-form-element__control select-size-wrapper"   style="vertical-align: top;">

                         <!--   <apex:inputField value="{!userExpenseReportSelector.pse__Expense_Report__c}" styleClass="slds-input {!rptLookupErrorClass}" />  -->

                                <apex:selectList value="{!userExpenseReportSelector.pse__Expense_Report__c}" size="1" id="ItemizedExpReports" styleClass="slds-select itemize-expense-report {!rptLookupErrorClass}">
                                    <apex:selectOptions Value="{!UserExpenseReports}" />
                                </apex:selectList>

                           </div>
                        </div>

                      </div> <!-- end form inline -->
                  </div>
              </apex:outputPanel> <!-- end advanced-filter-panel -->

                                    <!-- <div class="slds-button-group">
                                        <a href="#"
                                              class="slds-button slds-button--neutral slds-button--small"
                                               onclick="showDetailsModal('{! itemizedTransWrapper.cardTransaction.Id }', '{! JSENCODE(itemizedTransWrapper.cardTransaction.PSA_Merchant_Name__c) }'); return false;">
                                            Details
                                          </a>

                                          <button class="slds-button slds-button--neutral slds-button--small"
                                                 onclick="addItemLine();return false;">Add Line</button>

                                    </div> -->
                                </div>
                              </div>
                          </div>
                      </div>

                      <div class="slds-card__body slds-scrollable--x slds-scrollable--y">
                            <table class="slds-table slds-table--bordered">
                                <thead>
                                    <tr style="background-color: #f4f6f9;">
                                        <!-- delete row...-->
                                        <th class="slds-size--1-of-10"> Delete </th>

                                        <!-- expense date -->
                                        <th class="slds-text-heading--label slds-size--1-of-10" scope="col">
                                          <span class="{!expTypeDateErrorClass}">
                                              Expense Date
                                          </span>
                                        </th>

                                        <!-- expense report included when not opening page from an expense report-->

                                        <th class="slds-text-heading--label slds-size--1-of-10" scope="col">
                                          <apex:outputPanel rendered="{! notIsAddFromExpenseReport }">
                                                <i class="fa fa-star required-red" title="required"></i>
                                                <span class="{!rptLookupErrorClass}">
                                                  Expense Report
                                                </span>
                                          </apex:outputPanel>
                                        </th>



                                        <!-- expense type -->
                                        <th class="slds-text-heading--label slds-size--1-of-10" scope="col">
                                          <span class="{!expTypeSelectErrorClass}">
                                            <i class="fa fa-star required-red" title="required"></i>
                                              PSA Expense Type
                                          </span>
                                        </th>
                                        <!-- description -->
                                        <th class="slds-text-heading--label slds-size--1-of-10" scope="col">Description</th>
                                        <!-- amount -->
                                        <th class="slds-text-heading--label slds-size--1-of-10" scope="col">Amount</th>
                                        <!-- billable -->
                                        <th class="slds-text-heading--label slds-size--1-of-10 charge-type-cbox" scope="col">Billable</th>
                                        <!-- personal -->
                                        <th class="slds-text-heading--label slds-size--1-of-10 charge-type-cbox" scope="col">Personal</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <apex:repeat value="{!itemizedTransWrapper.itemizedTransactions}"
                                                 var="itemizedWrapper" id="itemizedTransactionWrapper">
                                      <tr>
                                        <!-- delete row -->
                                        <td>
                                            <!--
                                              hidden ; checked when delete is clicked
                                            -->
                                            <span style="display:none">
                                                <apex:inputCheckbox id="chk_i_trans"
                                                                    value="{!itemizedWrapper.selected}"
                                                                    styleClass="chk_i_trans chk-{!itemizedWrapper.counter}"/>
                                            </span>

                                            <a href="#" onclick="deleteItemizedRow('{!itemizedWrapper.counter}'); return false;" title="Click to delete row">
                                              <i class="fa fa-trash"
                                                 style="font-size:24px; color:#c23934"></i>
                                            </a>
                                        </td>

                                        <!-- expense date -->
                                        <td>
                                          <div class="slds-form-element">
                                              <!-- <label class="slds-form-element__label" for="date">To</label> -->
                                              <div class="slds-form-element__control">
                                                  <div class="slds-input-has-icon slds-input-has-icon--right">
                                                      <svg aria-hidden="true" class="slds-input__icon slds-icon-text-default">
                                                          <use xlink:href="{!URLFOR($Resource.SLDS092,'/assets/icons/utility-sprite/svg/symbols.svg#event')}"></use>
                                                      </svg>

                                                      <apex:inputField value="{!itemizedWrapper.cardTransaction.PSA_Transaction_Date__c}" styleClass="slds-input"/>

                                                  </div>
                                              </div>
                                          </div>

                                        </td>

                                        <!-- expense report only included when not opening page from an expense report-->

                                        <td>
                                          <apex:outputPanel rendered="{! notIsAddFromExpenseReport }">
                                              <div class="slds-form-element__control"
                                                  style="vertical-align: top;">

                                                    <apex:selectList value="{!itemizedWrapper.cardTransaction.PSA_Expense_Report__c}"
                                                        size="1"
                                                        id="ExpReports1"
                                                        styleClass="slds-select {!itemizedWrapper.cardTransaction.id}-expense-report"
                                                        onchange="toggleExpenseReportClearIcon()"
                                                        style="height:34px;max-width:250px;">
                                                    <apex:selectOptions Value="{!UserExpenseReports}" />
                                                    </apex:selectList>
                                              </div>
                                          </apex:outputPanel>
                                        </td>


                                        <!-- expense type -->
                                        <td>
                                            <apex:inputField value="{!itemizedWrapper.cardTransaction.PSA_Expense_Type__c}" styleClass="slds-select"/>

                                        </td>
                                        <!-- description -->
                                        <td>
                                            {! itemizedWrapper.cardTransaction.PSA_Merchant_Name__c } {! itemizedWrapper.cardTransaction.PSA_Merchant_State_Province__c }, {! itemizedWrapper.cardTransaction.PSA_Merchant_Country_Code__c }
                                        </td>

                                        <!-- amount -->
                                        <td>
                                          <apex:inputField value="{!itemizedWrapper.cardTransaction.PSA_Amount_in_Original_Currency__c }"
                                              styleClass="slds-input itemizedAmount"
                                              onchange="calculateItemizedAmounts()"/>
                                        </td>

                                        <!-- billable -->
                                        <td class="charge-type-cbox">
                                              <!-- checkbox...-->
                                              <span>
                                                <label class="slds-checkbox">
                                                  <apex:inputCheckbox styleClass="{!itemizedWrapper.counter}-i-cbritem {!itemizedWrapper.counter}-i-bcheck"
                                                                      value="{!itemizedWrapper.billable}"
                                                                      onclick="evalBillPersonalChecks('{!itemizedWrapper.counter}', 'i-bcheck', 'i-cbritem')"/>

                                                  <span class="slds-checkbox--faux"></span>
                                                </label>
                                              </span>
                                        </td>

                                        <!-- personal -->
                                        <td class="charge-type-cbox">
                                              <span>
                                                <label class="slds-checkbox">
                                                  <apex:inputCheckbox styleClass="{!itemizedWrapper.counter}-i-cbritem {!itemizedWrapper.counter}-i-pcheck"
                                                                      value="{!itemizedWrapper.personal}"
                                                                      onclick="evalBillPersonalChecks('{!itemizedWrapper.counter}', 'i-pcheck', 'i-cbritem')"/>

                                                  <span class="slds-checkbox--faux"></span>
                                                </label>
                                              </span>
                                        </td>
                                      </tr>
                                    </apex:repeat>
                                </tbody>
                                <tfoot>
                                    <tr style="background-color: #f4f6f9;" id="itemized-totals-wrapper">
                                      <td colspan="4"> </td>

                                      <td> <b>Totals:</b> </td>

                                      <td>
                                        <span>
                                          <apex:outputField value="{!itemizedTransWrapper.cardTransaction.CurrencyIsoCode}" />
                                          <span id="itemized-totals" style="padding:4px">
                                              {!itemizedTransWrapper.itemizedAmountTotals}
                                          </span>
                                        </span>


                                      </td>

                                      <td colspan="4"> </td>
                                    </tr>
                                </tfoot>
                            </table>


                      </div>

                      <!--
                        card footer....none
                      -->
<!--                       <div class="slds-card__footer ">

                        <button class="slds-button slds-button--brand slds-button--small "
                               onclick="addItemLine();return false;">Add Line</button>
                      </div> -->
                  </div>

<!-- rest of modal -->
              </div>
          </div>
          <div class="slds-modal__footer">

            <button class="slds-button slds-button--brand slds-button--small pull-left"
                   onclick="addItemLine();return false;">Add Line</button>


            <button class="slds-button slds-button--brand slds-button--small"
                   onclick="addItemizedCardToExpenseReport();return false;">Add Itemized to Expense Report</button>

            <button class="slds-button slds-button--neutral" onclick="cancelItemization();return false;">Cancel</button>

          </div>
        </div>
      </div>
      <div class="slds-modal-backdrop slds-modal-backdrop--open"></div>
    </div>
                </div>
              </apex:outputPanel>
            </apex:outputPanel> <!-- end itemized-card-transaction-wrapper -->



<!--
page scripts
-->
<script>

var hideExpenseReportClearIcon = function() {
  $("table.slds-table tbody tr").each(function(i,e) {
    var trid = $(e).attr("id");
    if (typeof trid === 'string' && trid !== '') {
      $(".clear-" + trid).css({"display":"none"});
    }
  });
}


var toggleExpenseReportClearIcon = function() {
  hideExpenseReportClearIcon(); // clear all...

  $("table.slds-table tbody span.lookupInput input").each(function(i,e) {
    var erval = $(e).val();
    if (erval != "") {
      var trid = $(e).closest("tr").attr("id");
      if (typeof trid === 'string' && trid !== '') {
         $(".clear-" + trid).css({"display":""});
      }
    }
  });
}

// --- TODO.....
// ---     Implement templating:
// ---      grab current html...
// ---      grab template
// ---      inject current html into template 'content'!!!

// ----------------------------------------------------------------------------
// updates page help info from object settings
// * // update the inline help text based on underlying object field inline help text
// - // display the configured inline help text, by the specific page selector
// ----------------------------------------------------------------------------
var bindHelpInfo = function() {
    // map the billable inline help section with the underlying inline help text
    _renderInlineHelpDropdown({
            selector : ".card-transaction-billable-inlinehelp",
                text : "{!$ObjectType.pse__Expense_Report__c.fields.pse__Billable__c.InlineHelpText}",
         defaultText : "Indicates a billable expense.",
      dropdownClass : "my-help-theme-more-to-left"});

    // map the personal help section with the underlying inline help text
    _renderInlineHelpDropdown({
            selector : ".card-transaction-charge-type-inlinehelp",
                text : "{!$ObjectType.PSA_Card_Transaction__c.fields.PSA_Charge_Type__c.InlineHelpText}",
         defaultText : "Indicates a personal expense.",
       dropdownClass : "my-help-theme-more-to-left"});

    // map the previously entered help section with the underlying inline help text
    _renderInlineHelpDropdown({
            selector : ".card-transaction-previously-entered-inlinehelp",
                text : "{!$ObjectType.PSA_Card_Transaction__c.fields.PSA_Previously_Entered__c.InlineHelpText}",
         defaultText : "Note, by selecting this box you are stating you have already processed this transaction.",
       dropdownClass : "my-help-theme-more-to-left"});

    _renderInlineHelpDropdown({
            selector : ".card-transaction-invalid-transaction-inlinehelp",
                text : "{!$ObjectType.PSA_Card_Transaction__c.fields.PSA_Invalid_Transaction__c.InlineHelpText}",
         defaultText : "Check to indicate the transaction is invalid.",
       dropdownClass : "my-help-theme-more-to-left"});


    // ---------------------------------------------
    // ---- expense field to help mappings
    // ---------------------------------------------

    // map the incurred country entered help section with the underlying inline help text
    _renderInlineHelpDropdown({selector : ".card-transaction-incurred-country-inlinehelp",
                         text : "{!$ObjectType.pse__Expense__c.fields.PSA_Incurred_Country__c.InlineHelpText}",
                   defaultText: "Required.  The incurred country for this transaction.",
                   dropdownClass: "my-help-theme-more-to-left"
    });

    // map the incurred state entered help section with the underlying inline help text
    _renderInlineHelpDropdown({
            selector : ".card-transaction-incurred-state-or-province-inlinehelp",
                text : "{!$ObjectType.pse__Expense__c.fields.PSA_Incurred_State_Province__c.InlineHelpText}",
         defaultText : "The Incurred State or Province for this transaction.",
         dropdownClass: "my-help-theme-even-more-to-left"
    });

    // map the receipt-type help section with the underlying inline help text
    _renderInlineHelpDropdown({
            selector : ".card-transaction-receipt-type-inlinehelp",
                text : "{!$ObjectType.pse__Expense__c.fields.PSA_Receipt_Type__c.InlineHelpText}",
         defaultText : "Receipt type for the expense",
       dropdownClass: "my-help-theme-even-more-to-left"
    });

    // map the attendees help section with the underlying inline help text
    _renderInlineHelpDropdown({
            selector : ".card-transaction-expense-attendees-inlinehelp",
                text : "{!$ObjectType.pse__Expense__c.fields.PSA_Attendees__c.InlineHelpText}",
         defaultText : "Attendees, required for specific expense types."
    });

    // map the attendees help section with the underlying inline help text
    _renderInlineHelpDropdown({
            selector : ".card-transaction-notes-attendees-inlinehelp",
                text : "{!$ObjectType.pse__Expense__c.fields.pse__Notes__c.InlineHelpText}",
         defaultText : "Expense Notes."
    });




    // map help for attachments
    _renderInlineHelpDropdown({
            selector : ".card-transaction-expense-attachment-inlinehelp",
                text : "Drop files here or click to upload",
         defaultText : "Drop files here or click to upload"});

    // ---------------------------------------------
    // ---- expense report field to help mappings
    // ---------------------------------------------

    // map the expense report resource entered help section with the underlying inline help text
    _renderInlineHelpDropdown({
            selector : ".expense-report-resource-inlinehelp",
                text : "{!$ObjectType.pse__Expense_Report__c.fields.pse__Assignment__c.InlineHelpText}",
         defaultText : ""});

    // map the expense report assignment entered help section with the underlying inline help text
    _renderInlineHelpDropdown({
            selector : ".expense-report-assignment-inlinehelp",
                text : "{!$ObjectType.pse__Expense_Report__c.fields.pse__Assignment__c.InlineHelpText}",
         defaultText : "Expense Report Assignment/Project"});

    // map the expense report name entered help section with the underlying inline help text
    _renderInlineHelpDropdown({
            selector : ".expense-report-name-inlinehelp",
                text : "Please enter the name for this expense report.",
         defaultText : ""});

    // map the expense report description entered help section with the underlying inline help text
    _renderInlineHelpDropdown({
            selector : ".expense-report-description-inlinehelp",
                text : "{!$ObjectType.pse__Expense_Report__c.fields.pse__Description__c.InlineHelpText}",
         defaultText : "Expense report description"});


    // ----- expense search help .....

    _renderInlineHelpDropdown({
            selector : ".expense-lookup-status-inlinehelp",
                text : "{!$ObjectType.pse__Expense__c.fields.pse__Status__c.InlineHelpText}",
                text : "Specify the expense status."});

    _renderInlineHelpDropdown({
            selector : ".expense-lookup-filter-from-inlinehelp",
                text : "Limits the results to expenses created after this date."});

    _renderInlineHelpDropdown({
            selector : ".expense-lookup-filter-to-inlinehelp",
                text : "Limits the results to expenses created before this date."});

    _renderInlineHelpDropdown({
            selector : ".expense-lookup-report-name-inlinehelp",
                text : "Limits the results to expenses by specific expense report name."});










}

// # Internal - convenient method to render inline help (slds-dropdown) for specific elements
// # args - hash
// #  :selector -> string value for the jquery element selector whose text value is to be updated
// #  :text -> string value of the text to be displayed
// #  :defaultText -> string value to display as default help
// #  :dropdownClass -> optional class name to use in the slds-dropdown div
// # example :
// # _renderInlineHelpDropdown{selector: ".jquery-elem-selector", text: "text value to render!"};
var _renderInlineHelpDropdown = function(args) {
  if (args != undefined && args != null && args.selector) {
    var helpTextTemplate = "";
    var _dropDownClass = args.dropdownClass || "";
    var inlineHelpText = args.text || (args.defaultText || "");
    if (typeof inlineHelpText !== 'undefined' && inlineHelpText.trim().length > 0) {
      // build the hep text drop down trigger and template to inject
      helpTextTemplate = [
          '<div class="slds-dropdown-trigger" style="padding-left:5px;" >',
            '<a class="cursor-pointer" aria-haspopup="true">',
              '<i class="fa fa-info-circle"></i>',
            '</a>',
            '<div class="slds-dropdown slds-dropdown--bottom slds-dropdown--left slds-nubbin--bottom-left ',
            'slds-theme--inverse ' + _dropDownClass + '" ',
                  ' style="min-width:200px;"> ',

              '<ul class="slds-dropdown__list" role="menu">',
                '<li id="menu-0-0" class="slds-dropdown__item">',
                  '<p>',
                    inlineHelpText,
                  '</p>',
                '</li>',
              '</ul>',
            '</div>',
          '</div>',
        ].join(' ');
    }
    // inject the help text template into the specific selector
    jQuery(args.selector).html(helpTextTemplate);
  }
}


// hides a transaction row, typically called on save
var hideTransactionRow = function(transid) {
  // hide the row
  $("#" + transid).addClass('hidden-class');
  $(".trans-detail-row-" + transid).addClass('hidden-class');

  // make sure its not checked
  $("." + transid + "-cbox").prop('checked', false);
}

// ********
// --------
// ********
var updateNumberOfCardTransHeadingMessage = function() {
  var numberOfCardTransacations = $("#card-transaction-table .card-trans-tbody tr.tr-trans-item").not(".hidden-class").length;
  numberOfCardTransacations = (typeof numberOfCardTransacations !== 'undefined') ? numberOfCardTransacations : '0';
  var selectedOption = $("#show-transactions option:selected").text();
  $("#heading-message").html(numberOfCardTransacations + " unused transactions, displayed by <i>" + selectedOption + "</i>");
}
// ********
// --------
// ********

// ----------------------------------------------------------------------------
// executed when the 'card-transaction-wrapper-body' panel is re-rendered
// ----------------------------------------------------------------------------
var bindCardTransactionWrapperBody = function(numberOfCardTransacations) {

    bindHelpInfo(); // initialize inline help!

    // update the page header values (transactions returned size....)
    numberOfCardTransacations = (typeof numberOfCardTransacations !== 'undefined') ? numberOfCardTransacations : '0';
    var selectedOption = $("#show-transactions option:selected").text();
    $("#heading-message").html(numberOfCardTransacations + " unused transactions, displayed by <i>" + selectedOption + "</i>");


    // logic to enable /disable buttons based on radio button selections
    var enabledButtonsOnChkBox = function() {
        if ($(".chk_trans:checked").length > 0) {
          $(".rb-selected-btn").prop("disabled", "");
        }
        else {
          $(".rb-selected-btn").prop("disabled", "disabled");
        }
    }
    enabledButtonsOnChkBox();

    // enable/disable btns when checkeboxes are clicked!
    $(".chk_trans").on("click", function(){
      enabledButtonsOnChkBox();
      $("#select-all").prop("checked", false);
    });

    // check all / de-check all when select-all is checked/unchecked....
    $("#select-all").on("click", function(){
        var isChecked = $(this).is(':checked');
        $(".chk_trans").prop('checked', isChecked);
        enabledButtonsOnChkBox();
        flashInputbackground("#card-transaction-table .cbox-checked-flash");
    });

    // ensure the spinner is stopped and the table is displayed
    $("#overlay-spinner").css({"display":"none"});
    $(".wrappercardbody-container").slideDown();    // slide table down

    // enable table column sorting!

    // -- configure table sorter to  sort the Amount/Currency column numerically
    // -- by stripping non-numeric characters (such as the USD currency)
    // -- and sorting by floating point values only
    $.tablesorter.addParser({
       id: 'currencySorter',
       is: function(s) {
         return false;
       },
       format: function(text, table, cell) {
          //console.log('text > ' + text + ' >>> ' + text.replace(/[^\d.]/g, ''));
         return parseFloat(text.replace(/[^\d.]/g, ''));
       },
       type: 'numeric'
     });



    // for tweaking the jquery tablesorter based on the users selected locale context
    var dateFormatForSort = (window.UserContext.locale == 'en_US') ? 'us' : 'uk';

    // define the tablesorter; disabled for the radio buttons, picklists, and inputs
    $("table#card-transaction-table").tablesorter({
        dateFormat : dateFormatForSort,
        headers: { 0: { sorter: false},
                   4: { sorter: 'currencySorter'},
                   5: { sorter: false},
                   6: { sorter: false},
                   7: { sorter: false},
                   8: { sorter: false},
                   9: { sorter: false},
                   10: { sorter: false},
                   11: { sorter: false},
                   12: { sorter: false},
                   13: { sorter: false} },
    });


    // hide the expense-report-column when accessing page from the expense report
    var hideExpenseReportCol = "{! isAddFromExpenseReport }".toLowerCase() === 'true';
    if (hideExpenseReportCol) {
      $(".card-trans-psa-expense-report").css({"display":"none"});
    }
    else {
      toggleExpenseReportClearIcon(); // enable logic for displaying expense report
    }

    calculateSize();
};


  // ----------------------------------------------------------------------------
  // Action behind the 'Refresh' filter button
  // ** calls the loadUserCardTransactions action:function
  // ---------------------------------------------------------------------------
  var refreshCardTransactions = function() {
    $("#overlay-spinner").css({"display":"initial"});     // show the spinner....

    // retrieve from and to date
    var startDate = "";
    var endDate = "";
    if ($(".dtHolderFrom").val() != "") {
      var dt = $(".dtHolderFrom").val();
      try {
        startDate = moment(DateUtil.getDateFromValue(dt)).format("YYYY-MM-DD");
      } catch(err) {
        startDate = moment(new Date(dt)).format("YYYY-MM-DD");
      }
    }

    if ($(".dtHolderTo").val() != "") {
      var dt = $(".dtHolderTo").val();
      try {
        endDate = moment(DateUtil.getDateFromValue(dt)).format("YYYY-MM-DD");
      } catch(err) {
        endDate = moment(new Date(dt)).format("YYYY-MM-DD");
      }
    }

    //console.log(' here.... startDate > ' + startDate + ' .... endDate > ' + endDate);

    // execute action function passing our start and end date
    loadUserCardTransactions(startDate, endDate);

    return false;
  }

  // ----------------------------------------------------------------------------
  // * Action behind the 'Itemize' buttons
  // - transid : optional transaction id to itemize, otherwise looks for nearest tr...
  // ----------------------------------------------------------------------------
  var itemizeCardTransaction = function(arg_transid) {
      $("#overlay-spinner").css({"display":"initial"});   // show the spinner....
      // grab the id of the tr, of the checked row, it should be our card transaction id to itemize
      // ---- use optional arg_transid if its defined, otherwise look for nearest tr to get the id...
      var trid = (typeof arg_transid !== 'undefined') ? arg_transid : $(".chk_trans:checked").first().closest('tr').attr('id');
      if (typeof trid !== 'undefined') {
          itemizeUserCardTransaction(trid);
      }
      return false;
  }


  var formatDateString = function(dtinput) {
      var dateString = dtinput;
      if (typeof dtinput === 'object' && typeof dtinput.getMonth === 'function') {
        try{
            //Attempt to format datetime using sfdc DateUtil method
            dateString = DateUtil.getDateStringFromUserLocale(dtinput);
        }catch(err){
            // fallback to the browser....
            dateString = dtinput.toLocaleDateString();
        }
      }
      return dateString;
  }

  // ----------------------------------------------------------------------------
  // events defined on page load
  // ----------------------------------------------------------------------------
  $(function(){
    /**
     * Action fired when show transactions is changed
     * - populates from/to dates based on selected option
     */
    var onShowTransactionsChange = function() {
      // grab the selected option name....populate from/to accordingly
      var selectedVal = $("#show-transactions option:selected").val();

      var fromDtVal = '';
      var toDtVal = '';

      if (selectedVal == 'unusedCurMonth') {
          fromDtVal = formatDateString(moment().startOf('month').toDate());
          toDtVal = formatDateString(moment().endOf('month').toDate());
      }
      else if (selectedVal == 'unusedCurYear') {
          fromDtVal = formatDateString(moment().startOf('year').toDate());
          toDtVal = formatDateString(moment().endOf('year').toDate());
      }
      else if (selectedVal == 'unusedToday') {
          fromDtVal = formatDateString(moment().startOf('day').toDate());
          toDtVal = formatDateString(moment().endOf('day').toDate());
      }

      // set the dates accordingly
      $(".dtHolderFrom").val(fromDtVal);
      $(".dtHolderTo").val(toDtVal);
    }

    // register 'show transactions' change action to auto set dates
    $("#show-transactions").on("change", function(){
        onShowTransactionsChange();
    });

  });

  // ************************************************************************
  // *
  // ** Support details dialog window
  // *
  // ************************************************************************

  // ------------------------------------------------------------------------
  // * Action behind 'Details' link to display
  // ------------------------------------------------------------------------
  var showDetailsModal = function(cardTransactionId, cardTransactionName) {
      // grab the transaction details, rendered as hidden element in the page
      var transDetails = $("#hidden-trans-details-" + cardTransactionId).html()

      // inject the hidden transaction details into the modal window
      $("#details-modal #modal-content").html(transDetails);

      // inject our card transaction name as the modal header
      $("#details-modal #modal-header").text(cardTransactionName);

      // show the modal
      $("#details-modal").fadeIn();
  }


  // ------------------------------------------------------------------------
  // when details modal cancel button is clicked...hide the modal
  // ------------------------------------------------------------------------
  var cancelDetailsModal = function() {
    //$("#details-modal").css({"display":"none"});
    //$("#details-modal").fadeOut('slow');
    $("#details-modal").fadeOut();
  }

// ------------------------------------------------------------------------
// action behind add-itemized-line
// ------------------------------------------------------------------------
var addItemLine = function() {
  $("#overlay-spinner").css({"display":"initial"});   // show the spinner....
  addItemizedLine();
  return false;
}

// ------------------------------------------------------------------------
// action behind remove-itemized-line
// ------------------------------------------------------------------------
var deleteSelectedItemLine = function() {
  $("#overlay-spinner").css({"display":"initial"});   // show the spinner....
  deleteSelectedItemizedLines();
  return false;
}

// -- single click delete.....
function deleteItemizedRow(itemizedCounter) {
  $(".chk-" + itemizedCounter).prop("checked", true);
  deleteSelectedItemLine();
}


// ------------------------------------------------------------------------
//// when amounts are changed
//
// ------------------------------------------------------------------------
var calculateItemizedAmounts = function() {
  var totalAmounts = 0;
  var hasError = false;

  $(".input-error").css({"border-color":""}); // clear

  $('.itemizedAmount').each(function(){
      var tval = $(this).val();
      var that = this;

      tval = tval.replace(/[^\d.]/g, ''); // clear non numbers and decimal point
      if (!isNaN(tval)) {
          totalAmounts += parseFloat(tval);

          if (($(that).hasClass("input-error"))) {
            $(that).removeClass("input-error");
          }
      }
      else {
        // indicate this is an error!
        if (!($(that).hasClass("input-error"))) {
          $(that).addClass("input-error");
        }
        hasError = true;
      }
    });


    totalAmounts = parseFloat(totalAmounts).toFixed(2); // 2 decimal places

    // check the itemized totals equal the itemized card amount
    // when not equal, wrap the amount in red to indicate
    var itemizedCardAmount = $("#itemizedCardAmount").val();
    if (typeof itemizedCardAmount !== 'undefined') {
      if (parseFloat(itemizedCardAmount) != parseFloat(totalAmounts)) {
          $("#itemized-totals").css({"border":"1px solid red"});
      } else {
        $("#itemized-totals").css({"border":""});
      }

    }

    // wrap the error in a red border
    $(".input-error").css({"border-color":"red"});


    if (hasError) {
      // wrap the totals in an error!!!!
      $("#itemized-totals-wrapper").css({"border":"1px solid red"});
    } else {
      $("#itemized-totals-wrapper").css({"border":""});
    }

    // write the amount totals
    $("#itemized-totals").text(totalAmounts);

    return false;
}



//
// transid     : wrapper.cardTransaction.id associated with row
// cval        : unique checkbox item class per row (i-bcheck, i-pcheck...)
// allselector : value used to get both checkboxes for specific line (either from the transactions or the itemized section)
//
// when box is checked unchecks both checkbox items, then re checks the checked one
// to ensure only one box per set is cliked at a time
function evalBillPersonalChecks(transid, cval, allselector) {
  var cboxElement = $("." + transid + "-" + cval);
  if(cboxElement.is(":checked")) {
    $("." + transid + "-" + allselector).prop("checked", false);  // uncheck both items
    $("." + transid + "-" + cval).prop("checked", true);          // re check the checked one
  }

  // TRIGGER MATCHING WHEN CLICKING THE PREVIOUSLY ENTERED CHECKBOX!
  if (cval === 'prevcheck') {
      if ($("." + transid + "-prevcheck").is(":checked")) {

        popupExpenseReportLookup(transid);

      }

  }

}

function addCardsToExpenseReport() {
  $("#overlay-spinner").css({"display":"initial"});     // show the spinner....
  addToExpenseReport(); // call upon action function to add selected items to expense report!
}


function addItemizedCardToExpenseReport() {
  $("#overlay-spinner").css({"display":"initial"});
  addItemizedToExpenseReport();
}


  // -- create expense report....
  var showExpenseReportModal = function(){
    $("#overlay-spinner").css({"display":"initial"});     // show the spinner....
    createAndShowNewExpenseReport();


  }


  var applyToExpenseReport = function() {
    $("#overlay-spinner").css({"display":"initial"});
    applySelectedToExpenseReport();
  }


  var cancelExpenseReportModal = function() {
    $("#expense-report-modal").fadeOut();
    $("#expense-report-modal").removeClass("overlay");
  }

  var saveExpenseReportModal = function() {
    // show the button row spinner and disable the buttons as we create our expense report!
    $(".er-btn").prop("disabled", "disabled");         // disable our buttons on expense report modal...
    $("#er-modal-spinner").css({"display":"initial"}); // render btn row spinner


    saveNewExpenseReport();
  }

  // --- action behind adding a single item to an expense report
  var addItemToExpenseReport = function(cardTransId)
  {
    // ----
    //   Support when adding from a specific expense report!!!
    // ---
    var notIsAddFromExpenseReport = "{! notIsAddFromExpenseReport }".toLowerCase() === 'true';

    // need to verify expense report is selected.......
    var expRptElem = $("." + cardTransId + "-expense-report");
    var expTypeElem = $("." + cardTransId + "-expense-type");

    //  incurred country...(required!)
    //  incurred state... (required when country is US)
    //  attendees.. (requred when type is meals + gwire...)

    var errMessages = [];

    // verify expense report is selected...only when not adding from expense report!!!!
    if (notIsAddFromExpenseReport) {
          var expRpt = expRptElem.val();
          $(expRptElem).removeClass("input-error-bg");
          if (typeof expRpt === 'undefined' || expRpt.trim().length <= 0) {
            if (!$(expRptElem).hasClass("input-error-bg")) {
              $(expRptElem).addClass("input-error-bg");
            }

            errMessages.push('Please select the expense report this card transaction should be assigned. ');
          }


    }

    // verify expense type is selected
    var expType = expTypeElem.val();
    $(expTypeElem).removeClass("input-error-bg");
    if (typeof expType === 'undefined' || expType.trim().length <= 0) {
      if (!$(expTypeElem).hasClass("input-error-bg")) {
        $(expTypeElem).addClass("input-error-bg");
      }

      errMessages.push('Please select the expense type this card transaction should be assigned. ');
    }

    // handle errors or...add the single item to the expense report
    if (errMessages.length > 0) {
      showError(errMessages.join("<br/>"));
    }
    else {
      // ok to save !
      //
      flashInputbackground("." + cardTransId + "-expense-report");
      flashInputbackground("." + cardTransId + "-expense-type");

      $("#overlay-spinner").css({"display":"initial"});     // show the spinner....
      addSingleItemToExpenseReport(cardTransId); // call upon action function to add this item to our expense report!
    }

  }





var toggleDetailRow = function(estId) {
    var jb = jQuery(".trans-detail-row-" + estId);
    if (jb.hasClass('hidden-class')) {
        jb.removeClass('hidden-class');

        if (estId != 'helper-details') {
          jQuery("." + estId + "-toggle-detail-btn-container").html("<i class='fa fa-chevron-up'/>");
        }

        // add brand coloring to buttons with expanded content
        jQuery("." + estId + "-toggle-detail-btn-container").parent().addClass("slds-button--brand")


        // render....
        if (estId != undefined && estId != null && estId != 'helper-details') {
          loadAttachments(estId);
        }
    }
    else {
        jb.addClass('hidden-class');
        if (estId != 'helper-details') {
          jQuery("." + estId + "-toggle-detail-btn-container").html("<i class='fa fa-chevron-down'/>");
        }

        // remove brand coloring from buttons when items are collapsed
        jQuery("." + estId + "-toggle-detail-btn-container").parent().removeClass("slds-button--brand");
    }

}
///// -----
var headerOpen = false;

// # toggles the header details....
var toggleHeaderDetailButton = function() {
  headerOpen = !headerOpen;
  if (headerOpen) {
    $(".toggle-header-button").html("<i class='fa fa-chevron-up'/>");
    openAllDetailRows();
    flashInputbackground(".toggle-row-button"); flashInputbackground(".toggle-header-button")

    // add brand coloring to buttons with expanded content
    $(".toggle-header-button").addClass("slds-button--brand");

  }
  else {
    $(".toggle-header-button").html("<i class='fa fa-chevron-down'/>");
    closeAllDetailRows();

    // remove brand coloring from buttons when items are collapsed
    $(".toggle-header-button").removeClass("slds-button--brand");

    flashInputbackground(".toggle-row-button"); flashInputbackground(".toggle-header-button")
  }

}

// # Internal - expands all detail rows
// # iterates the rows expanding each!
var openAllDetailRows = function() {
  // ensure hidden-class is removed from all rows
  $(".toggle-row-button").parent().parent().each(function(i,elem) {

    var apid = $(elem).attr("id");
    if (apid != undefined) {

      var detailRowSelector = ".trans-detail-row-" + apid;
      if ($(detailRowSelector).hasClass('hidden-class')) {
        $(detailRowSelector).removeClass('hidden-class');
      }

      // load attachments...
      loadAttachments(apid);

      // change button icon
      $("." + apid + "-toggle-detail-btn-container").html("<i class='fa fa-chevron-up'/>");
    }
  });
  // add brand coloring to buttons with expanded content
  $(".toggle-row-button").addClass("slds-button--brand");

}
// # Internal - collapses all detail rows
// # iterates the rows collapsing each!
var closeAllDetailRows = function() {
  // ensure hidden-class is removed from all rows
  $(".toggle-row-button").parent().parent().each(function(i,elem) {

    var apid = $(elem).attr("id");
    if (apid != undefined) {

      var detailRowSelector = ".trans-detail-row-" + apid;
      if (!$(detailRowSelector).hasClass('hidden-class')) {
        $(detailRowSelector).addClass('hidden-class');
      }

      // change button icon
      $("." + apid + "-toggle-detail-btn-container").html("<i class='fa fa-chevron-down'/>");
    }
  });
  // remove brand coloring from buttons when items are collapsed
  $(".toggle-row-button").removeClass("slds-button--brand");
}


// --- nice!
//   flashInputbackground(".a6f340000006CNcAAM-expense-report")
var flashInputbackground = function(selector) {
  $(selector).addClass("flash-input-bg");
  setTimeout(function(){
    $(selector).removeClass("flash-input-bg");
  },800)
}



///// utility .... provides dynamic scaling of element containing the card-transaction-table
    var $window = jQuery(window);

    var calculateSize = function () {
        // resize the panel, based on the window
        var $panel = jQuery(".wrappercardbody-container");
        if (typeof $panel == 'undefined') {
            return;
        }

        var offset = $panel.offset();
        if (typeof offset !== 'undefined') {
            var availableWidth = $window.width() - offset.left + $window.scrollLeft();
            var availableHeight = $window.height() - offset.top + $window.scrollTop();

            // provide a little padding
            if (availableWidth > 21) {
                availableWidth = availableWidth - 21;
            }
            // adjust the containing panel width....
            $panel.width(availableWidth);

            // provide height adjustment logic based on current grid dimensions
            if (availableHeight > 75) {
                availableHeight = availableHeight - 75;
            }

            var tbodyHeight = jQuery(".card-trans-tbody").height();

            if ((availableHeight + 75) > tbodyHeight) {
              availableHeight = tbodyHeight || 55;
            }

          //console.log(' availableHeight > ' + availableHeight + ' ..... panel ' + $panel.height());

            //if ($panel.height() > availableHeight) {
            $panel.height(availableHeight);
            //}




        }
    };

    // ----- auto size grid table
    calculateSize();

    // and auto size it again every time window is resized.
    jQuery(window).on('resize', function() {
        calculateSize();
    });

  </script>


    <!--
        Dialog for the Details modal/dialg
    -->
    <div class="slds class" id="details-modal" style="display:none">
      <div aria-hidden="false" role="dialog" class="slds-modal slds-fade-in-open"    style="bottom: initial;">
        <div class="slds-modal__container">
          <div class="slds-modal__header slds-text-heading--label">
            <h2 class="slds-text-heading--medium"><span id="modal-header"></span></h2>
          </div>
          <div class="slds-modal__content">
              <div id="modal-content">
                  <!--
                    NOTE !!!!:
                    We will be injecting the card transaction details here!
                    based on hidden data rendered in the repeated rows above
                  -->
              </div>
          </div>
          <div class="slds-modal__footer">
            <button class="slds-button slds-button--brand" onclick="cancelDetailsModal();return false;">OK</button>
          </div>
        </div>
      </div>
      <div class="slds-modal-backdrop slds-modal-backdrop--open"></div>
    </div>


    <!--
        Dialog for the create Expense Report modal/dialg
    -->
    <div class="xslds " id="expense-report-modal" style="display:none">
        <div aria-hidden="false" role="dialog" class="slds-modal slds-fade-in-open"    style="bottom: initial;">
          <div class="slds-modal__container">
            <div class="slds-modal__header slds-text-heading--label">
              <h2 class="slds-text-heading--medium">Create Expense Report</h2>
            </div>
            <div class="slds-modal__content" style="padding:0px;">
                <div id="modal-content"  style="padding:0px;">

                  <!-- display the expense report resource -->


              <!--
                *** DISPLAY EXPENSE REPORT RESOURCE
              -->
              <div class="slds-form--inline">
                <div class="slds-form-element exp_report_modal_resource_name" style="padding-bottom:10px;">
                  <div class="slds-form-element__label">
                    <label class="slds-align-middle expense-report-dialog-label">Resource</label>

                    <!--
                      *** placeholder for where we will render our inline help template
                      TEMPLATE FOR INLINE HELP!
                    -->
                    <span class="expense-report-resource-inlinehelp"/>
                    <!-- END TEMPLATE FOR INLINE HELP! -->


                  </div>
                  <div class="slds-form-element__control exp_report_modal_resource_control">
                          <apex:outputPanel id="expRptModalExpRptResource">
                              <apex:outputField value="{!createdExpenseReport.pse__Resource__c}"></apex:outputField>
                          </apex:outputPanel>
                  </div>
                </div>
              </div>
              <!--
              **** END DISPLAY EXPENSE REPORT RESOURCE
              -->
                  <!-- error panel for modal -->
                  <div class="expRerportErrorContainer" style="display:none">
                      <div class="slds-notify-container"                  style="position:initial" >
                        <div class="slds-notify slds-notify--toast slds-theme--error" role="alert"   style="min-height:60px;width:85%;">

                          <span class="slds-assistive-text">Error</span>

                          <!-- close alert button, simply hides this alert -->
                          <button class="slds-button slds-button--icon-inverse slds-notify__close"
                                  onclick='$(".expRerportErrorContainer").css({"display":"none"}); return false;'>
                                  <i class="fa fa-times" style="font-size: 24px; color: white;"></i>
                                  <span class="slds-assistive-text">Close</span>
                          </button>

                          <div class="notify__content slds-grid" >
                            <i class="fa fa-exclamation-triangle" style="font-size: 24px; padding-right:15px;"></i>
                            <div class="slds-col slds-align-middle">
                              <h2 class="slds-text-heading--small"     style="text-align:center;">

                                <!-- were going to inject the error message into this element -->
                                <span id="expReportErrMsg"></span>

                              </h2>
                            </div>
                          </div>
                        </div>
                      </div>

                    <div style="clear:both ; "></div>
                  </div>


                  <div class="slds-form" style="padding:16px;">
                    <!--
                    ** assignment selection
                    -->
                    <div class="slds-form">
                      <div class="slds-form-element" style="padding-bottom:10px;">
                        <div class="slds-form-element__label">
                          <label class="slds-align-middle expense-report-dialog-label">Assignment / Project</label>

                          <!--
                            *** placeholder for where we will render our inline help template
                            TEMPLATE FOR INLINE HELP!
                          -->
                          <span class="expense-report-assignment-inlinehelp"/>
                          <!-- END TEMPLATE FOR INLINE HELP! -->

                        </div>
                        <div class="slds-form-element__control">
                          <apex:outputPanel id="expRptModalUsrAssigSelectOptions">



                            <apex:selectList multiselect="false" size="1" value="{!expenseReportAssignmentId}"
                                  styleClass="slds-select"
                                  style="height:34px">
                                        <apex:selectOptions value="{!userAssignmentSelectOptions}"/>
                            </apex:selectList>




                          </apex:outputPanel>
                        </div>
                      </div>
                    </div>
                    <!--
                    **** END Assignment selections
                    -->

                    <!--
                      ** Expense Report Name form element
                    -->
                    <div class="slds-form">
                      <div class="slds-form-element" style="padding-bottom:10px;">
                        <div class="slds-form-element__label">
                          <label class="slds-align-middle expense-report-dialog-label">Expense Report Name</label>

                          <!--
                            *** placeholder for where we will render our inline help template
                            TEMPLATE FOR INLINE HELP!
                          -->
                          <span class="expense-report-name-inlinehelp"/>
                          <!-- END TEMPLATE FOR INLINE HELP! -->

                        </div>
                        <div class="slds-form-element__control">

                          <apex:outputPanel id="expRptModalExpRptName">
                              <apex:inputField value="{!createdExpenseReport.name}" styleClass="slds-input created-expense-report-name" />
                          </apex:outputPanel>

                        </div>
                      </div>
                    </div>
                    <!--
                    **** END exspense report name
                    -->

                    <!--
                      ** Expense Report Description form element
                    -->
                    <div class="slds-form">
                      <div class="slds-form-element" style="padding-bottom:10px;">
                        <div class="slds-form-element__label">
                          <label class="slds-align-middle expense-report-dialog-label">Expense Report Description</label>
                          <!--
                            *** placeholder for where we will render our inline help template
                            TEMPLATE FOR INLINE HELP!
                          -->
                          <span class="expense-report-description-inlinehelp"/>
                          <!-- END TEMPLATE FOR INLINE HELP! -->
                        </div>

                        <div class="slds-form-element__control">

                        <apex:outputPanel id="expRptModalExpRptDesc">
                            <apex:inputField value="{!createdExpenseReport.pse__Description__c}" styleClass="slds-input" />
                        </apex:outputPanel>

                        </div>
                      </div>
                    </div>
                    <!--
                    **** END espense report description
                    -->
                  </div>
              </div>

              <div style="clear:both ; padding-bottom:15px"></div>

              <div class="slds-modal__footer">
                <!-- spinner displayed when saving a new expense report -->
                <span id="er-modal-spinner" style="display:none; padding-right:40px;">
                      <img src="{!URLFOR($Resource.SLDS092,'/assets/images/spinners/slds_spinner.gif')}"
                           alt="Loading..."
                           style="height:34px"/>
                </span>

                <button class="slds-button slds-button--brand er-btn" onclick="saveExpenseReportModal();return false;">Save</button>
                <button class="slds-button slds-button--brand er-btn" onclick="cancelExpenseReportModal();return false;">Cancel</button>
              </div>
            </div>
        </div>
      </div>

      <div class="slds-modal-backdrop slds-modal-backdrop--open"></div>

    <apex:outputPanel id="expenseReportModalPanel">

      <script>
        // script for the dialog modal
        $(function() {
          // hide spinner(s)
          $("#overlay-spinner").css({"display":"none"});   // ensure the big spinner is hidden
          $("#er-modal-spinner").css({"display":"none"});  // ensure btn row spinner is hidden
          $(".er-btn").prop("disabled", "");               // ensure our buttons are enabled


          if ("{! showExpenseReportModal }".toLowerCase() === 'true') {
            // display the modal
            $("#expense-report-modal").addClass("overlay");
            $("#expense-report-modal").fadeIn();

            // display panel error message, if needed
            var hasExpReportErr = "{! hasExpReportErr }".toLowerCase() == 'true';
            if (hasExpReportErr) {
              $("#expense-report-modal #expReportErrMsg").html("{! expReportErrMsg }");
              $("#expense-report-modal .expRerportErrorContainer").css({"display":"initial"});
            }
          }
          else {
            // hide error and close modal
            $("#expense-report-modal").removeClass("overlay");
            $("#expense-report-modal .expRerportErrorContainer").css({"display":"none"});
            $("#expense-report-modal").fadeOut();
          }
        });
      </script>
    </apex:outputPanel>
  </div> <!-- end expense report modal -->


  <apex:outputPanel id="expenseLookupPanel">


    <!--
        Dialog for the looking up expenses to map to card transaction
    -->
    <div class="xslds" id="map-card-trans-expense-modal" style="display:none">
      <div aria-hidden="false" role="dialog" class="slds-modal slds-fade-in-open"    style="bottom: initial;">
        <!-- <div class="slds-modal__container"> -->

        <div class="slds-modal__container"
             style="max-width:1200px;
                        width:1200px;
                   max-height:800px;">

          <div class="slds-modal__header slds-text-heading--label">
            <h2 class="slds-text-heading--medium">
              <div style="padding-right:15px;display:inline;">
                      <svg aria-hidden="true" class="slds-icon slds-icon--large"
                            style="background: #54698d;">
                        <use xmlns:xlink="http://www.w3.org/1999/xlink"
                             xlink:href="{!URLFOR($Resource.SLDS092,'/assets/icons/standard-sprite/svg/symbols.svg#endorsement')}"
                             >
                        </use>

                      </svg>
              </div>

<!-- <svg aria-hidden="true" class="slds-icon slds-icon-text-default">
<use xmlns:xlink="http://www.w3.org/1999/xlink"
  xlink:href="{!URLFOR($Resource.SLDS092,'/assets/icons/standard-sprite/svg/symbols.svg#calibration')}"

  xlink:href="{!URLFOR($Resource.SLDS092,'/assets/icons/standard-sprite/svg/symbols.svg#report')}"
  xlink:href="{!URLFOR($Resource.SLDS092,'/assets/icons/standard-sprite/svg/symbols.svg#endorsement')}"

  xlink:href="{!URLFOR($Resource.SLDS092,'/assets/icons/custom-sprite/svg/symbols.svg#custom17')}"


      ></use>

</svg> -->
              Match Card Transaction With Expense
            </h2>
          </div>
          <div class="slds-modal__content">
              <div id="modal-content">
                  <!--
                    error container
                  -->
                  <div class="errorContainer" style="display:none">
                      <div class="slds-notify-container"
                            style="position:initial" >
                        <div class="slds-notify slds-notify--toast slds-theme--error" role="alert"
                             style="min-height:60px;width:85%;">
                          <span class="slds-assistive-text">Error</span>
                          <button class="slds-button slds-button--icon-inverse slds-notify__close"
                                  onclick='$(".errorContainer").css({"display":"none"}); return false;'>
                                  <i class="fa fa-times" style="font-size: 24px; color: white;"></i>
                                  <span class="slds-assistive-text">Close</span>
                          </button>
                          <div class="notify__content slds-grid" >
                            <i class="fa fa-exclamation-triangle" style="font-size: 24px; padding-right:15px;"></i>
                            <div class="slds-col slds-align-middle">
                              <h2 class="slds-text-heading--small"     style="text-align:center;">
                                <apex:outputText value="{!pageErrorMessage}" escape="false" />
                              </h2>
                            </div>
                          </div>
                        </div>
                      </div>
                    <div style="clear:both ; padding-bottom:15px"></div>
                  </div>
                  <!--
                    *** end *** end error container
                  -->

                  <!--
                    render card ???
                  -->
                  <!-- card dropdown -->

                        <div class="slds-grid slds-grid--align-spread slds-theme--alt-inverse" style="padding:8px">

                                <div class="slds-col slds-align-middle">
                                  <b>Transaction To Match: </b>
                                      <span class="card-transaction-description"/>
                                </div>
                                <div class="slds-col slds-align-middle">
                                  <b> Date:</b>
                                        <span class="card-transaction-date"/>
                                </div>
                                <div class="slds-col slds-align-middle">
                                    <div style="vertical-align:middle;">
                                       <b> Amount: </b>
                                            <span class="card-transaction-amount"/>
                                    </div>
                                </div>
                        </div>

                    <div class="slds-card"                          style="background-color: initial;">
                      <div class="slds-card__header"                style="background-color: initial;">

                          <div class="slds-grid">
                              <div class="slds-col slds-size--2-of-3" style="margin:6px;">

                                <div class="slds-grid match-card-transaction-expense-report">
                                  <div class="slds-col slds-size--1-of-3" style="margin:0 25px 0 0">

                                    <!--
                                    status filter
                                    -->
                                    <div class="slds-form">
                                      <div class="slds-form-element">
                                        <label class="slds-form-element__label">
                                          Status
                                          <span class="expense-lookup-status-inlinehelp" />
                                        </label>

                                        <div class="slds-form-element__control">

                                          <select id="expense-filter-status"
                                                  class="slds-select"
                                                  onchange="">
                                            <option value="Any" selected="selected">Any Draft or Rejected Reports</option>
                                            <option value="Draft">Draft Reports Only</option>
                                            <option value="Rejected">Rejected Reports Only</option>
                                          </select>


                                        </div>


                                      </div>
                                    </div>
                                    <!--
                                    end status filter
                                    -->

                                    <!--
                                    expense report name filter
                                    -->
                                    <div class="slds-form" style="padding-top:8px">
                                      <div class="slds-form-element">
                                        <label class="slds-form-element__label">
                                          Expense Report Name
                                          <span class="expense-lookup-report-name-inlinehelp" />
                                        </label>
                                        <div class="slds-form-element__control">
                                          <input type="text" class="slds-input" id="filter-expense-report-name"
                                                 onchange="" />

                                        </div>
                                      </div>
                                    </div>
                                    <!--
                                    end status filter
                                    -->

                                  </div>

                                  <div class="slds-col slds-size--1-of-3"  style="margin:0 25px 0 0">

                                    <!--
                                    from expense date.
                                    -->
                                    <div class="slds-form">
                                      <div class="slds-form-element " >
                                          <label class="slds-form-element__label" for="date">
                                            Created After
                                            <span class="expense-lookup-filter-from-inlinehelp" />
                                          </label>
                                          <div class="slds-form-element__control">

                                              <div class="slds-input-has-icon slds-input-has-icon--right datepicker-zindex">
                                                  <svg aria-hidden="true" class="slds-input__icon slds-icon-text-default">
                                                      <use xlink:href="{!URLFOR($Resource.SLDS092,'/assets/icons/utility-sprite/svg/symbols.svg#event')}"></use>
                                                  </svg>
                                                  <input type="text" class="slds-input" id="from-expense-date"
                                                        onchange="" />

                                              </div>

                                          </div>
                                      </div>
                                    </div>

                                    <!--
                                    to expense date.
                                    -->
                                    <div class="slds-form"
style="padding-top:8px">
                                      <div class="slds-form-element " >
                                          <label class="slds-form-element__label" for="date">
                                            Created Before
                                            <span class="expense-lookup-filter-to-inlinehelp" />
                                          </label>
                                          <div class="slds-form-element__control">

                                              <div class="slds-input-has-icon slds-input-has-icon--right datepicker-zindex">
                                                  <svg aria-hidden="true" class="slds-input__icon slds-icon-text-default">
                                                      <use xlink:href="{!URLFOR($Resource.SLDS092,'/assets/icons/utility-sprite/svg/symbols.svg#event')}"></use>
                                                  </svg>
                                                  <input type="text" class="slds-input" id="to-expense-date"
                                                           onchange=""/>

                                              </div>

                                          </div>
                                      </div>
                                    </div>
                                  </div>

<!--                                   <div class="slds-col slds-size--1-of-3"  style="margin:0 25px 0 0">
                                    NOTES???
                                  </div> -->

                                </div>

<!--                                 <div class="slds-form" >
                                  <div class="slds-form-element">
                                      <label class="slds-form-element__label">Expense Report</label>
                                      <div class="slds-form-element__control">

                                          <span class="match-card-transaction-expense-report">
                                              <apex:selectList size="1"
                                                              id="ExpReportsSelect"
                                                              onchange="refreshExpenseList()"
                                                              styleClass="slds-select refresh-expense-report"
                                                              style="height:34px">
                                                  <apex:selectOptions Value="{!UserExpenseReports}" />
                                              </apex:selectList>
                                          </span>

                                      </div>
                                  </div>
                                </div> -->

                              </div> <!-- end col -->

<!--
NOTES?
-->

                              <div class="slds-col slds-size--1-of-6" style="margin:6px;">

                              <apex:outputPanel id="filter-search-button" rendered="{! notIsAddFromExpenseReport }">

                                    <div style="margin-top:20px">


                                      <div class="slds-button-group">

                                        <button class="slds-button slds-button--small slds-button--brand"
                                                style="background-color: #16325c; border-color: #16325c;"
                                              onclick="filterByStatuses();return false;">
                                          Search
                                        </button>

                                        <button class="slds-button slds-button--small slds-button--neutral"
                                              onclick="cancelExpenseReportLookup();return false;">
                                          Cancel
                                        </button>

                                      </div>

                                    </div>
                              </apex:outputPanel>

                              </div>

                              <div class="slds-col slds-size--1-of-3" style="margin:6px;">

                                    <div id="help" class="slds-popover xslds-popover--tooltip"
                                            role="tooltip" aria-live="polite"
                                            style="max-width: 420px;">
                                        <div class="slds-popover__body slds-text-longform">
                                          <span>
                                            <svg aria-hidden="true" class="slds-icon slds-icon--x-small slds-icon-text-default">
                                                <use xlink:href="{!URLFOR($Resource.SLDS092,'/assets/icons/utility-sprite/svg/symbols.svg#info')}"></use>
                                            </svg>
                                            <span class="match-card-transaction-help">
                                              Use the filters on the left to search for previously entered expenses to match to the credit card transaction.
                                            </span>

                                          </span>
                                        </div>
                                      </div>

                              </div>

                          </div>
                      </div> <!-- end card header -->

                      <div class="slds-card__body  main-expense-content-container" style="min-height:275px;">
                            <!-- loading expense spinner !!! -->
                            <div style="clear:both;">
                                <div class="expense-inner-spinner hidden-class" style="text-align: center;padding-top:20px;">
                                    <img src="{!URLFOR($Resource.SLDS092,'/assets/images/spinners/slds_spinner_brand.gif')}" alt="Loading..."
                                    style="width: 155px;height: 155px;"/>
                                </div>
                            </div>

                            <!--
                              table listing of expenses for selected expense report
                              NOTE: tbody is injected from expense-row-template
                            -->
                            <div class="slds-scrollable--x slds-scrollable--y">
                                <table class="slds-table slds-table--bordered tablesorter" id="expense-list-table">
                                    <thead>
                                      <tr class="slds-theme--shade">
                                        <th> </th>
                                        <th class="cursor-pointer">Name  </th>
                                        <th class="cursor-pointer">Expense Report  </th>
                                        <th class="cursor-pointer">Type  </th>
                                        <th class="cursor-pointer">Status  </th>
                                        <th class="cursor-pointer">Expense Date  </th>
                                        <th class="cursor-pointer">Amount  </th>
                                        <th class="cursor-pointer">Description  </th>
                                        <th class="cursor-pointer">Notes  </th>
                                      </tr>
                                    </thead>

                                    <tbody id="expense-body-rows">
                                      <!--
                                        NOTE!!!!!!
                                        rows inject here from the expense-row-template
                                      -->
                                    </tbody>

                                    <tfoot>
                                      <tr>
                                        <td colspan="9" style="text-align: center">
                                          <span class="show-more-button-container">
                                              <button class="slds-button slds-button--brand"
                                                    style="background-color: #16325c; border-color: #16325c;"
                                                    onclick="showMoreRecords(); return false;">
                                                    Click To Show More Results

                                              </button>
                                          </span>

                                        </td>
                                      </tr>
                                    </tfoot>
                                  </table>
                            </div>


                            <span id="expense-message-container" />

                        </div> <!-- end slds-card__body -->

                    </div>
              </div>
          </div>
          <div class="slds-modal__footer">

           <button class="slds-button slds-button--brand pull-left match-item-button"
                      onclick="matchExpenseToCardTransaction();return false;"
                      disabled="disabled">
                      Match Selected Item
            </button>

            <button class="slds-button slds-button--neutral" onclick="cancelExpenseReportLookup();return false;">Cancel</button>
          </div>
        </div>
      </div>
      <div class="slds-modal-backdrop slds-modal-backdrop--open"></div>
    </div>

    <!--
      template for rendering our expense item rows
      this is injected into the table body above
    -->
    <script id="expense-row-template" type="x-template">
        <tr>
            <td><span class="exp-id radio-btn"/></td>
            <td><span class="exp-name"/></td>
            <td><span class="exp-report-name"/></td>
            <td><span class="exp-type"/></td>
            <td><span class="exp-status"/></td>
            <td><span class="exp-date"/></td>
            <td><span class="exp-amount"/></td>

            <td class=""><div class="cursor-pointer exp-description" onclick="toggleWhiteSpace(this)" title="Click to expand or collapse"/></td>
            <td class=""><div class="cursor-pointer exp-notes" onclick="toggleWhiteSpace(this)" title="Click to expand or collapse"/></td>

        </tr>
    </script>

<script>

var toggleWhiteSpace = function(element) {
  var jqElement = $(element); // as a jquery element.....
  if (jqElement.hasClass("er-white-space-normal")) {
    jqElement.removeClass("er-white-space-normal");
  }
  else {
    jqElement.addClass("er-white-space-normal");
  }
  //console.log(e);
}

</script>
<!--
-->


<!--

Display:

  Lookup:

** Pending Expense Items
** Rejected Expense Reports
** Filter by

// lookup exp report names

expenseReportGateway


-->

    <!-- expenses -->
    <script>
    // create our expense and expense report gateways for retrieving remote expense/expense report objects
    // var expenseGateway       = new SObjectModel.ExpenseGateway();
    // var expenseReportGateway = new SObjectModel.ExpenseReportGateway();

      // ++++ define global expense info message
      var EXPENSE_INFO_MESSAGE = "Select an expense report above to get started!";

      // --- maintain specific card transaction to associate with expense
      var modalCardTransactionId = null;

      // -----------------------------------------------------
      // -- pops open the 'match card trans to expense' modal
      // -- clearing any previous selections or updates
      // -- and rendering the rows and template!
      var popupExpenseReportLookup = function(cardTransactionId) {
          pg_curoffset = 0; // initialize our offset....

          _initializeExpenseFiltering(cardTransactionId); //initialize the filtering dates

          // ++ lookup card transaction details in page and render in our popup
          _mergeCardDetailsIntoModal(cardTransactionId);

          // maintain the card transaction id while the modal is open
          modalCardTransactionId = cardTransactionId;

          // if previously entered is checked (this drives our select options)
          var previouslyEnteredTrans = $("." + modalCardTransactionId + "-prevcheck").is(":checked");
/***
  If Previously Entered = True, only show Approved Expense Reports
  If Previously Entered = False, only show Draft, Submitted or Rejected Expense Reports
***/
          // create a reference to the picklist element.
          var expStatusPicklist = document.getElementById("expense-filter-status");

          // clear all previously entered picklist options, we will dynamically add below....
          expStatusPicklist.options.length = 0;

          // build the status options when previously entered is true

          if (previouslyEnteredTrans == true) {
            // If Previously Entered = True, only show Approved Expense Reports
            expStatusPicklist.options.add(new Option('Approved Reports Only', 'Approved'));
          }
          else {
            // If Previously Entered = False, only show Draft, Submitted or Rejected Expense Reports
            expStatusPicklist.options.add(new Option('Any Draft Or Rejected Reports', 'Any'));
            expStatusPicklist.options.add(new Option('Draft Reports Only', 'Draft'));
            expStatusPicklist.options.add(new Option('Rejected Reports Only', 'Rejected'));
            expStatusPicklist.options.add(new Option('Submitted Reports Only', 'Submitted'));
          }
/***
end previously entered dynamic option logic
***/

          // ++ clear expense report selections
          $(".refresh-expense-report").val('');

          // ++ clear rows ; and make sure we can display the table
          $('#expense-body-rows').html("");
          $('#expense-list-table').removeClass("hidden-class"); // display table

          // render info message!
          setExpenseContainerMessage(EXPENSE_INFO_MESSAGE, 'info');


          // enable/disable match button based on user selection
          evalMatchItemButton();

          // render the modal
          $("#map-card-trans-expense-modal").fadeIn();

          // --- logic for auto selecting and auto retrieving
          var notIsAddFromExpenseReport = "{! notIsAddFromExpenseReport }".toLowerCase() === 'true';

          // when not adding from expense report...look at line item expense report, select based on it
          if (notIsAddFromExpenseReport) {
            filterByStatuses();
          }
          else {

            // called when executed from expense report page
            // lookup underlying expense report!!!!
var userExpenseReportId = "{!userExpenseReport.id}"
            $(".refresh-expense-report").val(userExpenseReportId);
            refreshExpenseList({'userExpenseReportId':userExpenseReportId });

            // hide the expense report select box, and display the underlying expense report name
            var expRptName = "{!userExpenseReport.name}";

            // -CONTENT DISPLAYED WHEN VIEWING FROM EXPENSE REPORT!
            $(".match-card-transaction-expense-report").html('<span class="slds-text-heading--medium">Expense Report <div style="padding-left:15px">' + expRptName + "</div></span>");

            $(".match-card-transaction-help").html("Select a previously created expense to map to this card transaction.");
          }
      }

      // ----------------------------------------------------------------------
      // initialize jquery datepickers for from and to, based on the current transaction date.......
      // ----
      var _initializeExpenseFiltering = function(cardTransactionId) {
        // initialize the jq datepickets....
        ["#from-expense-date", "#to-expense-date"].forEach(function(selector){
          $(selector).val(''); // clear it
          $(selector).datepicker({dateFormat: "yy-mm-dd"}); // ensure it's a datepicker
        });

        try {
          // ... attempts default the expense date filtering based on the selected card transactions transaction date.....
          //
          // formatted date is rendered in the 'data-date-frmt' attribute
          //
          var _trans_date = $("." + cardTransactionId + "-trans-date").attr('data-date-frmt');

          //console.log(_trans_date)

          var fromExpVal = moment(new Date(_trans_date)).add(-5, 'days').format('YYYY-MM-DD');
          var toExpVal   = moment(new Date(_trans_date)).add(5, 'days').format('YYYY-MM-DD');

          $("#from-expense-date").val(fromExpVal);
          $("#to-expense-date").val(toExpVal);

        }
        catch(boom) {
          console.log(boom)
        }
      }


      // ----------------------------------------------------------------------
      // - retrieves card transaction attributes from the page
      // -
      // ----------------------------------------------------------------------
      function _mergeCardDetailsIntoModal(cardTransactionId) {
        // read values for card transaction, rendered in page
        var _trans_amount = $("." + cardTransactionId + "-trans-amount").html();
        var _trans_date = $("." + cardTransactionId + "-trans-date").html();
        var _trans_description = $("." + cardTransactionId + "-trans-description").html();

        // Now write those values to our popup window
        $("#map-card-trans-expense-modal .card-transaction-amount").html(_trans_amount);
        $("#map-card-trans-expense-modal .card-transaction-date").html(_trans_date);
        $("#map-card-trans-expense-modal .card-transaction-description").html(_trans_description);

      }

      var cancelExpenseReportLookup = function() {
          $(".errorContainer").css({"display":"none"}); // clear errors
          $("#map-card-trans-expense-modal").fadeOut();
      }

      // # internal - hides the table
      //            - renders the spinner
      var showExpenseSpinner =function () {
        // hide the table!
        $('#expense-list-table').addClass("hidden-class");

        // strip sorting indicators
        $("#expense-list-table thead tr th").removeClass("headerSortDown")
        $("#expense-list-table thead tr th").removeClass("headerSortUp")


        // show spinner
        $(".expense-inner-spinner").removeClass("hidden-class");
      }

      // # internal - renders the result table
      //            - hides the spinner
      var hideExpenseSpinner =function () {
        // show the table!
        $('#expense-list-table').removeClass("hidden-class");

        // hide spinner
        $(".expense-inner-spinner").addClass("hidden-class");
      }


      // # renders a specific message to the expense message container
      // #
      // # msg - String of the message to render
      // # theme - String of the theme to render (info, error, success, warning...)
      // #
      var setExpenseContainerMessage = function(msg, theme) {
        var _mhtml= "";

        var _mtheme = (typeof theme !== 'undefined') ? theme : 'error';
        var _mfaicon = 'fa-ban'

        if (_mtheme == 'info') {
          _mfaicon = 'fa-info-circle';
        }

        // create our notification!
        if (typeof msg !== 'undefined' && msg.trim().length > 0) {
            _mhtml= [
                '<div class="slds-notify slds-notify--alert slds-theme--' + _mtheme + ' slds-theme--alert-texture" role="alert" style="margin:15px;">',
                    '<h2 style="font-weight:bold">',
                        '<i class="fa ' + _mfaicon + '" style="padding-right:15px;"></i>' + msg,
                    '</h2>',
                '</div>',
            ].join('');
        }
        // render the notification to the page
        $('#expense-message-container').html(_mhtml);
      }

      // enable disable match item button
      var evalMatchItemButton = function() {
        if ($("input[name='expense-radio']:checked").length > 0) {
          $(".match-item-button").prop("disabled", "");
        }
        else {
          $(".match-item-button").prop("disabled", "disabled");
        }
      }


      // ...builds the expense filtering payload
      //
      //
      var filterByStatuses = function(reset) {
        var statusOption = $("#expense-filter-status").val();

        // reset rows....triggerd when the page current offset (pg_curoffset) is nil
        if (typeof reset === 'undefined' || reset === null || reset === true) {
          pg_curoffset = 0;
        }

        // expense report name to search for!
        var filterExpenseReportName = $("#filter-expense-report-name").val();

        // expense date 'from' range
        var fromExpDate = $("#from-expense-date").datepicker('getDate');
        if (fromExpDate != null) {
          fromExpDate = moment(fromExpDate).format('YYYY-MM-DD');
        }

        // expense date 'to' range
        var toExpDate = $("#to-expense-date").datepicker('getDate');
        if (toExpDate != null) {
          toExpDate = moment(toExpDate).format('YYYY-MM-DD');
        }

        // build the filtering options
        var filterOptions = {};

        // when expense report name is provided....only search by it???
        if (typeof filterExpenseReportName !== 'undefined' && filterExpenseReportName != null && filterExpenseReportName.length > 0) {
          filterOptions.expenseReportName = filterExpenseReportName;
        }
        // otherwsie search for any expenses created in the time frame....
//        else {
          if (typeof statusOption !== 'undefined' && statusOption !== null) {
            filterOptions.status = statusOption;
          }
          if (typeof fromExpDate !== 'undefined' && fromExpDate != null) {
            filterOptions.fromExpDate = fromExpDate;
          }
          if (typeof toExpDate !== 'undefined' && toExpDate != null) {
            filterOptions.toExpDate = toExpDate;
          }
//        }

        refreshExpenseList(filterOptions);
      }

      var showMoreRecords = function() {
        // paginate through results.....
        filterByStatuses(false);
      }

      var pg_limit = 50;
      var pg_curoffset = 0;

      var refreshExpenseList = function(options) {
        var resourceId = "{!userExpenseReport.pse__Resource__c}";

        // lookup resource, defined in the rendered panel
        if (typeof curPseResource !== 'undefined') {
          resourceId = curPseResource;
        }

        // default options for refresh
        var _defaultOptions= {
          resourceId: resourceId,
          limit: pg_limit,
          offset: pg_curoffset,
          status:'Any'
        }

        // +
        options = jQuery.extend(_defaultOptions, (options || {}));

        var showingMoreRows = false; // only when page

        if (pg_curoffset > 0) {
          showingMoreRows = true;
        }

        // clear any existing rows unless were showing more rows// were going to inject displayed rows below
        if (!showingMoreRows) {
          $('#expense-body-rows').html("");
        }

        // call vf remote action...
        vfr_refreshRemote(options);

      }


    // ---
    // --- performs our visualforce remote action
    var vfr_refreshRemote = function(filterFields) {

      setExpenseContainerMessage(''); // clear the message container
      showExpenseSpinner(); // render spinner...

      Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.psaExpenseAddCardTransactionsController.lookupExpenses}',

            JSON.stringify(filterFields),

            function(results, event) {
              if (event.status) {

                // when the results contains an error....
                // thats an error
                if (typeof results.error !== 'undefined' && results.error === true) {
                  showError(results.errorMessage);
                  hideExpenseSpinner();
                }
                else {
                  // no errors...render the results and kill the spinner
                  handleRemoteResultRecords(results.records);
                  hideExpenseSpinner();
                }

              }
              else {
                // event.status is not true....thats an error
                showError(event.message);
                hideExpenseSpinner();
              }
            },
            {escape: false}
        );
    }

    // --- writes the results of the remote action
    // --- to our expense listing table.....
    var handleRemoteResultRecords = function(records) {
        hasResults = records.length > 0;

        if (!hasResults && pg_curoffset <= 0) {
          setExpenseContainerMessage('No expenses retrieved for the filter criteria', 'warning');
        }

        pg_curoffset += records.length;


        hideShowMoreButton(records.length < pg_limit);
        records.forEach(function(r) {
            var e_id          = r.Id;
            var e_name        = r.Name;
            var e_description = r.pse__Description__c;
            var e_amount      = r.pse__Amount__c;
            var e_type        = r.pse__Type__c;
            var e_status      = r.pse__Status__c;
            var e_date        = r.pse__Expense_Date__c;
            var e_rptId       = r.pse__Expense_Report__c;
            var e_curIsoCode  = r.CurrencyIsoCode;
            var e_notes       = r.pse__Notes__c;
            var e_rptName = (typeof r.pse__Expense_Report__r !== 'undefined') ? r.pse__Expense_Report__r.Name : '';

            // format our expense date...
            e_date = moment(new Date(e_date)).format("YYYY-MM-DD");

            // Get the template HTML as a string
            var template = $('#expense-row-template').html();

            // Change the string literal into a jQuery object
            var $template = $(template);

            // construct radio button from our expense id
            var expenseRadioButon_ = [
                '<label class="slds-radio">',
                    '<input type="radio" ',
                           'name="expense-radio" ',
                           'onchange="evalMatchItemButton()" ',
                           'value="' + e_id + '" /> ',
                    '<span class="slds-radio--faux"></span>',
                  '</label>',
            ].join('');

            // inject radio button
            $template.find('.exp-id').html(expenseRadioButon_);

            // Insert the data into the template
            $template.find('.exp-amount').text((e_curIsoCode || '') + " " + e_amount);
            $template.find('.exp-name').text(e_name);
            $template.find('.exp-report-name').text(e_rptName);
            $template.find('.exp-status').text(e_status);


            $template.find('.exp-date').text(e_date);
            $template.find('.exp-description').text(e_description);
            $template.find('.exp-notes').text(e_notes);
            $template.find('.exp-type').text(e_type);

            // add our row/template to the table body
            $('#expense-body-rows').append($template);

            this.evalMatchItemButton();
            this.hideExpenseSpinner();

        });

        // // let the table sorter know we updated!
        defineExpenseTableSort();

    }

    // initialize tables sorter for our expense listing...
    $(function(){
            $("table#expense-list-table").tablesorter({
                headers: { 0: { sorter: false},
                           6: { sorter: 'currencySorter'}}
            });
    });

    //.... let the tablesorter know
    var defineExpenseTableSort = function() {
      $("table#expense-list-table").trigger('update');
    }



      // --- hides or shows the show more button
      // -- action - when true hides the button
      // --        - when false renders it
      var hideShowMoreButton = function(action) {
        var defaultAction = true;
        if (typeof action !== 'undefined' && typeof action === 'boolean') {
          defaultAction = action;
        }
        if (defaultAction) {
            if (!$(".show-more-button-container").hasClass("hidden-class")) {
              $(".show-more-button-container").addClass("hidden-class");
            }
        }
        else{
            $(".show-more-button-container").removeClass("hidden-class");
        }
      }


      // set to true before calling the action function
      // then evaluated on the callback from the action function.....
      var hasMapTransactionToExpense_called = false;

      // -------------------------------------------------------
      // Action behind the match expenses to card transaction
      // call actionFunction....then render a panel which will handle the results...callupon ...update things....
      // -------------------------------------------------------
      var matchExpenseToCardTransaction = function() {
        var checkedExpense = ($("input[name='expense-radio']:checked").val());
        //console.log(checkedExpense);
        if (typeof checkedExpense !== 'undefined' && checkedExpense.trim().length > 0) {
            hasMapTransactionToExpense_called = true; // for callback to trigger hiding the spinner....
            $("#overlay-spinner").css({"display":"initial"});

            // is previously entered checkbox checked?
            var previouslyEnteredTrans = $("." + modalCardTransactionId + "-prevcheck").is(":checked");

            //console.log(previouslyEnteredTrans)

            // call the action function, which should rerender the 'map-trans-to-expense-callback-panel'
            mapTransactionToExpense(modalCardTransactionId, checkedExpense, previouslyEnteredTrans);
        }
      }

    </script>

  </apex:outputPanel>


<!--
  this panel handles the response from action function for mapping transaction to expense calls
-->
<apex:outputPanel id="map-trans-to-expense-callback-panel">
  <script>
      // called when action function re-renders
      var afterMapTransToExpense = function () {
        if (hasMapTransactionToExpense_called) {
            var hasError = ("{! hasPageError }".toLowerCase() === 'true');
            var pageError = "{!pageErrorMessage}";
            if (hasError) {
              showError(pageError);
            }
            else {

              // .. // .. // hide the transaction row we just mapped!!!
              hideTransactionRow(modalCardTransactionId);
              // $("#" + modalCardTransactionId).addClass('hidden-class');
              // $(".trans-detail-row-" + modalCardTransactionId).addClass('hidden-class');

//hasMapTransactionToExpense_called

              // hide modal....
              cancelExpenseReportLookup();
            }

            updateNumberOfCardTransHeadingMessage();


            // reset!
            hasMapTransactionToExpense_called = false;
            $("#overlay-spinner").css({"display":"none"});   // ensure the spinner is hidden
        }
      }

      $(function(){
          afterMapTransToExpense();
      });
  </script>

</apex:outputPanel>



</div> <!-- ui-view -->

    </div> <!-- end slds -->


</div> <!-- end ng-app -->

<!-- drop zone -->
<script>
    // define remote object for working with attachments
    var attachmentGateway   = new SObjectModel.AttachmentGateway();
</script>

<!--
*** TODO: migrate the following to js resource (Dropzones)
-->
<script>
    // disable auto discover of Dropzone (were going to inject/initialize these below)!
    Dropzone.autoDiscover = false;

    // ------------------------------------------------------------------------
    // define the 'url' function for dropzone;
    // grabs the data-parent-id value (aka: expense-id) and uploads the file
    // ------------------------------------------------------------------------
    var dropzoneUrlFn = function(files) {
        //console.log('dropzoneUrlFn called');
        // console.log(files);
        if (typeof files !== 'undefined' && files.length && files.length > 0) {
            var parentid = $(files[0].previewElement).attr('data-parent-id');
            uploadFiles(files, parentid);
        }
    }


    // ------------------------------------------------------------------------
    // when items are added to a dropzone
    // * inject the containing tr data-parent-id (added in html) into the preview element
    // * inject the specific attachment-id (created new or retrieved from existing) into the preview element
    // * customize the preview container, to allow the dz-filename to link to the SFDC file
    // ------------------------------------------------------------------------
    var handleAddedDropzoneFile = function(file) {
        var dzelement = $(this.element);
        var parentid = $(dzelement).attr("data-parent-id"); // retrieve the elements parent-id

        // inject parent-id into element name
        dzelement.find(".dz-preview:last-child").attr('data-parent-id', parentid);

        // inject attachment id, if provided
        var attachmentid = file["data-attachment-id"];
        if (typeof attachmentid !== 'undefined' && attachmentid != null) {
           dzelement.find(".dz-preview:last-child").attr('data-attachment-id', attachmentid);
        }

        // grab the file preview container
        var filePreviewElement = $(file.previewElement);

        // ------ * customize portions of the preview container
        // ------ * make the name link to the file...
        // ------

        // grab the filename from preview
        if (typeof filePreviewElement !== 'undefined' && filePreviewElement != null) {
            var dzFilenameSpan = filePreviewElement.find(".dz-filename span");

            var dzRemoveLink = filePreviewElement.find(".dz-remove");

            if (typeof dzFilenameSpan !== 'undefined' && dzFilenameSpan != null) {
                // make the filename a link to the image.....
                var viewFile = Dropzone.createElement("<a href='#' style='cursor:pointer'>" + file.name + "</a>");

                // Capture the Dropzone instance as closure.
                var _this = this;

                // Listen to the click event
                viewFile.addEventListener("click", function(e) {
                    // Make sure the button click doesn't submit the form:
                    e.preventDefault();
                    e.stopPropagation();

                    //alert(" VIEW ???");

                    var dzelement = $(file.previewElement);
                    if (typeof dzelement !== 'undefined' && dzelement != null) {


                        if (!filePreviewElement.hasClass("dz-error")) {
                            // grab the attachment id from the preview element, and open the attachment in a new window
                            var attachmentId = $(dzelement).attr("data-attachment-id");
                            window.open("/servlet/servlet.FileDownload?file=" + attachmentId, "_blank");
                        }
                        else {
                            // if the element is invalid....trigger the remove file logic....
                            //dzRemoveLink.click();
                            _this.removeFile(file);

                        }
                    }

                });
                // render our dropzone file
                dzFilenameSpan.html(viewFile);
            }
        }
    }

    // ------------------------------------------------------------------------
    // when items are removed from a dropzone
    // * remove the attachment from the dropzone and server
    // ------------------------------------------------------------------------
    var handleRemovedDropzoneFiles = function(file) {
        var dzelement = $(file.previewElement);
        var parentId = $(dzelement).attr("data-parent-id");
        var attachmentId = $(dzelement).attr("data-attachment-id");
        if (typeof attachmentId !== 'undefined' && attachmentId != null) {
                removeAttachment(attachmentId, parentId);

                // update our hasattachment line indicator
                countAttachments(parentId);
        }
    }

    // ------------------------------------------------------------------------
    // hide row spinner
    // ------------------------------------------------------------------------
    var hideInnerSpinner = function(parentId){
        $("#dropzone-" + parentId).css({"display":""});          // show the dropzone
        $(".inner-spinner-" + parentId).css({"display":"none"}); // hide the sppiner
    }

    // ------------------------------------------------------------------------
    // show row spinner
    // ------------------------------------------------------------------------
    var showInnerSpinner = function(parentId){
        $("#dropzone-" + parentId).css({"display":"none"});         // hide the dropzone
        $(".inner-spinner-" + parentId).css({"display":"initial"}); // show the spinner
    }

    //
    // * clear the dropzones...when they are defined...to force dynamic reload
    //
    var resetDropzones = function() {
      if (typeof parentIdDropzones === 'object' && Object.keys(parentIdDropzones).length > 0) {
          parentIdDropzones = {};
      }
    }

    // container for parentId to dropzone......
    // * We will maintain the dropzones by parent id in this object!
    // * e.g parentIdDropzones[<parent-id>] = dropzone-instance
    var parentIdDropzones = {};

    // ------------------------------------------------------------------------
    // loads attachments for specific expense id
    // * looks up or initialize the dropzone associated with the expense-id
    // * queries remote object to retrieve attachments associated with expense-id
    // ** and includes them into the dropzone preview.
    // ------------------------------------------------------------------------
    function loadAttachments(parentId) {
        // initialize our dropzone (if needed)
        var myDropzone = parentIdDropzones[parentId]; // lookup from page....

        if (typeof myDropzone === 'undefined' || myDropzone == null) {
            /*
                The dropzone instance for the expense id does not yet exist.
                ...lets initialize it with any attachments associated with the expense line
            */
            // show row spinner
            this.showInnerSpinner(parentId);

            // define dropzone options
            var dropzoneOptions = {
                url: dropzoneUrlFn,
                addRemoveLinks: true,
                dictRemoveFileConfirmation: "Are you sure you want to delete the attachment?"
            };


            // create the dropzone
            myDropzone = new Dropzone("#dropzone-" + parentId, dropzoneOptions);
            myDropzone.on("addedfile", handleAddedDropzoneFile);
            myDropzone.on("removedfile", handleRemovedDropzoneFiles);

            myDropzone.on("reset", function() {
                var dzelement = $(this.element);
                if (typeof dzelement !== 'undefined' && dzelement != null) {

                    var existingPreivewElements = dzelement.find(".dz-preview");
                    if (existingPreivewElements !=null && existingPreivewElements.length > 0) {
                        // console.log hide it!!!!
                        if (! dzelement.hasClass("dz-started")) {
                            dzelement.addClass("dz-started");
                        }
                    } else {
                        //console.log show it!!!
                        if (dzelement.hasClass("dz-started")) {
                            dzelement.removeClass("dz-started");
                        }
                    }
                }
            });

            // Maintain our constructed dropzones!!!
            parentIdDropzones[parentId] = myDropzone; // store to page

             // query the remote object for our attachments!
            var criteria = {where: {ParentId: {eq: parentId}} };
            attachmentGateway.retrieve(criteria, function(error, results, event) {
                if (error) {
                    alert(error.message); // TODO HANDLE ERROR....render to page...

                    // stop spinner....
                    this.hideInnerSpinner(parentId);

                    // halt processing
                    return;
                }

                // iterate over our retrieved results adding the attachments to the dropzone
                results.forEach(function(element, index, array) {
                    // render elements to page...
                    var e_id         = element.get("Id");
                    var e_parentId   = element.get("ParentId");
                    var e_name       = element.get("Name");
                    var e_bodyLength = element.get("BodyLength");


                    // Create the mock file:
                    var mockFile = { name: e_name,
                                     size: e_bodyLength,
                                     "data-attachment-id": e_id};

                    // Call the default addedfile event handler
                    myDropzone.emit("addedfile", mockFile);

                    mockFile.previewElement.classList.add('dz-processing');

                    var dzMockThumbUrl = "/servlet/servlet.FileDownload?file=" + e_id;

                    // use a default thumnail for PDF / DOC files
                    // by evaluating the file name when ends with docx or pdf
                    if (endsWith(e_name, ".pdf")) {
                        dzMockThumbUrl = "{!URLFOR($Resource.PSAjsComponents, 'vendor/images/pdf_icon_large.thumbnail.jpg')}";
                    } else if (endsWith(e_name, ".docx")) {
                        dzMockThumbUrl = "{!URLFOR($Resource.PSAjsComponents, 'vendor/images/word_doc_icon.jpg')}";
                    }

                    // And optionally show the thumbnail of the file:
                    myDropzone.emit("thumbnail", mockFile, dzMockThumbUrl);

                    /*
                    // Or if the file on your server is not yet in the right
                    // size, you can let Dropzone download and resize it
                    // callback and crossOrigin are optional.
                    // ******** NOTE: currently causes crossOrigin tainted canvas error when used in vfpage
                    myDropzone.createThumbnailFromUrl(mockFile, "/servlet/servlet.FileDownload?file=");
                    */

                    mockFile.previewElement.classList.add('dz-success');

                    // Make sure that there is no progress bar, etc...
                    myDropzone.emit("complete", mockFile);

                    // set these so the render works correctly!
                    mockFile.previewElement.classList.add('dz-complete');

                                // If you use the maxFiles option, make sure you adjust it to the
                                // correct amount:
                                //var existingFileCount = 1; // The number of files already uploaded
                                //myDropzone.options.maxFiles = myDropzone.options.maxFiles - existingFileCount;



                });
                // stop the spinner...
                this.hideInnerSpinner(parentId);
            });

        } // end if !defined
    }

    // returns true if the specific str ends with the suffix,returns false otherwise
    function endsWith(str, suffix) {
        return str.indexOf(suffix, str.length - suffix.length) !== -1;
    }

    // ------------------------------------------------------------------------
    // remove attachment, through the remote object
    // ------------------------------------------------------------------------
    function removeAttachment(attachmentid, parentId) {
        attachmentGateway.del([attachmentid],function(err, reslults, event){
            if (err) {
                    alert(err);
            } else {

// TODO: perhaps some visual indicator that the remove was successful?
                console.log("successfully removed attachment");

            }
        });
    }

    // ------------------------------------------------------------------------
    // determine if attachments are still applied to the expense line
    // ------------------------------------------------------------------------
    function countAttachments(parentId) {

        showHasAttachmentSpinner(parentId);

        // Use the remote object to retrieve attachments for the specific events
        // and render the hasAttachments accordingly
        var criteria = {where: {ParentId: {eq: parentId}} };
        attachmentGateway.retrieve(criteria, function(error, results, event) {
            if (error) {
                console.log(error.message);
                showHasAttachmentCbox(parentId);
                return; // halt processing
            }


            if (results.length && results.length > 0) {
                $("#" + parentId + "-hasAttachments").html('<span class="hasAttachmentYes"><i title="Has Attachments" class="fa fa-check"></i></span>');
            }
            else {
                $("#" + parentId + "-hasAttachments").html('<span class="hasAttachmentNo"><i title="Has No Attachments" class="fa fa-chain-broken"></i></span>');
            }

            showHasAttachmentCbox(parentId);
        });
    }

    // hides the checkbox field and displays the loading spinner
    var showHasAttachmentSpinner = function(parentId) {
        $("#" + parentId + "-hasAttachments").css({"display":"none"});     // hide has attachment checkbox
        $("#" + parentId + "-hasAttachments-spinner").css({"display":""}); // show has-attachment spinner
    }

    // hides the loading spinner rendering the checkbox field
    var showHasAttachmentCbox = function(parentId){
        $("#" + parentId + "-hasAttachments").css({"display":""});             // show has attachment checkbox
        $("#" + parentId + "-hasAttachments-spinner").css({"display":"none"}); // hide has-attachment spinner
    }

    // ------------------------------------------------------------------------
    // logic for uploading files, using the ajax toolkit and HTML5 FileReader
    // ------------------------------------------------------------------------
    function uploadFiles(filesToUpload, parentId) {
        showHasAttachmentSpinner(parentId);

        for(var i = 0, f; f = filesToUpload[i]; i++) {
            var reader = new FileReader();

            // Keep a reference to the File in the FileReader so it can be accessed in callbacks
            reader.file = f;

            reader.onerror = function(e) {
                switch(e.target.error.code) {
                    case e.target.error.NOT_FOUND_ERR:
                        alert('File Not Found!');
                        break;
                    case e.target.error.NOT_READABLE_ERR:
                        alert('File is not readable');
                        break;
                    case e.target.error.ABORT_ERR:
                        break; // noop
                    default:
                        alert('An error occurred reading this file.');
                };
            };

            reader.onabort = function(e) {
                alert('File read cancelled');
            };

            reader.onload = function(e) {
                var att = new sforce.SObject("Attachment");
                att.Name = this.file.name;
                att.ContentType = this.file.type;
                att.ParentId = parentId;

                att.Body = (new sforce.Base64Binary(e.target.result)).toString();

                sforce.connection.create([att], {
                    onSuccess : function(result, source) {
                        console.log("on success .... 1");
                        console.log(result);

                        if (result[0].getBoolean("success")) {
                            // add the new attachment-id to the preview image (so we can delete it!)
                            if (reader.file && reader.file.previewElement) {
                                $(reader.file.previewElement).attr("data-attachment-id", result[0].id);
                            }
                        }
                        else {
                            alert("failed to create attachment " + result[0]);
                        }

                        // update our hasattachment line indicator
                        countAttachments(parentId);

                    },
                    onFailure : function(error, source) {
                        // re-enable buttons
                        alert("An error has occurred " + error);
                    }
                });
            };

            reader.readAsBinaryString(f);
        }
    }

</script>

</apex:form>



</html>
</apex:page>